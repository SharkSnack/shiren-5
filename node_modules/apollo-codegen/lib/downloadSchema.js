'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _utilities = require('graphql/utilities');

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Based on https://facebook.github.io/relay/docs/guides-babel-plugin.html#using-other-graphql-implementations

var defaultHeaders = {
  'Accept': 'application/json',
  'Content-Type': 'application/json'
};

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url, outputPath, additionalHeaders, insecure) {
    var headers, agent, result, response, schemaData;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            headers = (0, _assign2.default)(defaultHeaders, additionalHeaders);
            agent = insecure ? new _https2.default.Agent({ rejectUnauthorized: false }) : null;
            result = void 0;
            _context.prev = 3;
            _context.next = 6;
            return (0, _nodeFetch2.default)(url, {
              method: 'POST',
              headers: headers,
              body: (0, _stringify2.default)({ 'query': _utilities.introspectionQuery }),
              agent
            });

          case 6:
            response = _context.sent;
            _context.next = 9;
            return response.json();

          case 9:
            result = _context.sent;
            _context.next = 15;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](3);
            throw new _errors.ToolError(`Error while fetching introspection query result: ${_context.t0.message}`);

          case 15:
            if (!result.errors) {
              _context.next = 17;
              break;
            }

            throw new _errors.ToolError(`Errors in introspection query result: ${result.errors}`);

          case 17:
            schemaData = result;

            if (schemaData.data) {
              _context.next = 20;
              break;
            }

            throw new _errors.ToolError(`No introspection query result data found, server responded with: ${(0, _stringify2.default)(result)}`);

          case 20:

            _fs2.default.writeFileSync(outputPath, (0, _stringify2.default)(schemaData, null, 2));

          case 21:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 12]]);
  }));

  function downloadSchema(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  }

  return downloadSchema;
}();
//# sourceMappingURL=downloadSchema.js.map