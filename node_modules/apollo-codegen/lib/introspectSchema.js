'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.introspect = undefined;

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var introspect = exports.introspect = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schemaContents) {
    var schema;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            schema = (0, _graphql.buildASTSchema)((0, _graphql.parse)(schemaContents));
            _context.next = 3;
            return (0, _graphql.graphql)(schema, _utilities.introspectionQuery);

          case 3:
            return _context.abrupt('return', _context.sent);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function introspect(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _graphql = require('graphql');

var _utilities = require('graphql/utilities');

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(schemaPath, outputPath) {
    var schemaContents, result;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (_fs2.default.existsSync(schemaPath)) {
              _context2.next = 2;
              break;
            }

            throw new _errors.ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);

          case 2:
            schemaContents = _fs2.default.readFileSync(schemaPath).toString();
            _context2.next = 5;
            return introspect(schemaContents);

          case 5:
            result = _context2.sent;

            if (!result.errors) {
              _context2.next = 8;
              break;
            }

            throw new _errors.ToolError(`Errors in introspection query result: ${result.errors}`);

          case 8:

            _fs2.default.writeFileSync(outputPath, (0, _stringify2.default)(result, null, 2));

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  function introspectSchema(_x2, _x3) {
    return _ref2.apply(this, arguments);
  }

  return introspectSchema;
}();
//# sourceMappingURL=introspectSchema.js.map