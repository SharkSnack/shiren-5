{"version":3,"sources":["../../src/typescript/types.js"],"names":["typeNameFromGraphQLType","builtInScalarMap","name","context","type","bareTypeName","nullable","ofType","typeName","passthroughCustomScalars","customScalarsPrefix"],"mappings":";;;;;QA6BgBA,uB,GAAAA,uB;;AA7BhB;;AAOA;;AAEA;;AAYA,IAAMC,mBAAmB;AACvB,GAAC,uBAAcC,IAAf,GAAsB,QADC;AAEvB,GAAC,oBAAWA,IAAZ,GAAmB,QAFI;AAGvB,GAAC,sBAAaA,IAAd,GAAqB,QAHE;AAIvB,GAAC,wBAAeA,IAAhB,GAAuB,SAJA;AAKvB,GAAC,mBAAUA,IAAX,GAAkB;AALK,CAAzB;;AAQO,SAASF,uBAAT,CAAiCG,OAAjC,EAA0CC,IAA1C,EAAgDC,YAAhD,EAA+E;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;;AACpF,MAAIF,uCAAJ,EAAoC;AAClC,WAAOJ,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,EAA4D,KAA5D,CAAP;AACD;;AAED,MAAIG,iBAAJ;AACA,MAAIJ,oCAAJ,EAAiC;AAC/BI,eAAY,UAASR,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,EAA4D,IAA5D,CAAkE,IAAvF;AACD,GAFD,MAEO,IAAID,0CAAJ,EAAuC;AAC5CI,eAAWP,iBAAiBG,KAAKF,IAAtB,MAAgCC,QAAQM,wBAAR,GAAmCN,QAAQO,mBAAR,GAA8BN,KAAKF,IAAtE,GAA4ED,iBAAiB,uBAAcC,IAA/B,CAA5G,CAAX;AACD,GAFM,MAEA;AACLM,eAAWH,gBAAgBD,KAAKF,IAAhC;AACD;;AAED,SAAOI,WAAWE,WAAW,SAAtB,GAAkCA,QAAzC;AACD","file":"types.js","sourcesContent":["import {\n  join,\n  block,\n  wrap,\n  indent\n} from '../utilities/printing';\n\nimport { camelCase } from 'change-case';\n\nimport {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLEnumType\n} from 'graphql';\n\nconst builtInScalarMap = {\n  [GraphQLString.name]: 'string',\n  [GraphQLInt.name]: 'number',\n  [GraphQLFloat.name]: 'number',\n  [GraphQLBoolean.name]: 'boolean',\n  [GraphQLID.name]: 'string',\n}\n\nexport function typeNameFromGraphQLType(context, type, bareTypeName, nullable = true) {\n  if (type instanceof GraphQLNonNull) {\n    return typeNameFromGraphQLType(context, type.ofType, bareTypeName, false)\n  }\n\n  let typeName;\n  if (type instanceof GraphQLList) {\n    typeName = `Array< ${typeNameFromGraphQLType(context, type.ofType, bareTypeName, true)} >`;\n  } else if (type instanceof GraphQLScalarType) {\n    typeName = builtInScalarMap[type.name] || (context.passthroughCustomScalars ? context.customScalarsPrefix + type.name: builtInScalarMap[GraphQLString.name]);\n  } else {\n    typeName = bareTypeName || type.name;\n  }\n\n  return nullable ? typeName + ' | null' : typeName;\n}\n"]}