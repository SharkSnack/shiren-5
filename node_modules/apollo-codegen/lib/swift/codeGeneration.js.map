{"version":3,"sources":["../../src/swift/codeGeneration.js"],"names":["generateSource","classDeclarationForOperation","initializerDeclarationForProperties","structDeclarationForFragment","structDeclarationForSelectionSet","initializationForProperty","dictionaryLiteralForFieldArguments","propertiesFromFields","propertyFromField","structNameForProperty","typeNameForFragmentName","typeDeclarationForGraphQLType","context","generator","printOnNewline","printNewline","typesUsed","forEach","type","operations","operation","fragments","fragment","output","operationName","operationType","variables","fields","fragmentsReferenced","source","className","protocol","modifiers","adoptedProtocols","withIndent","length","print","properties","map","name","propertyName","typeName","isOptional","ofType","printNewlineIfNeeded","withinBlock","structName","fragmentName","typeCondition","possibleTypes","inlineFragments","fragmentSpreads","parentType","beforeClosure","String","fragmentProperties","isProperSuperType","schema","bareTypeName","inlineFragmentProperties","inlineFragment","property","filter","isComposite","responseName","fieldName","fieldArgs","args","isList","methodName","fieldInitArgs","expressionFromValue","value","kind","variableName","Array","isArray","key","arg","field","isConditional","bareType","singularize","undefined","enumerationDeclaration","structDeclarationForInputObjectType","description","values","getValues","getFields"],"mappings":"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","file":"codeGeneration.js","sourcesContent":["import {\n  GraphQLError,\n  getNamedType,\n  isCompositeType,\n  isAbstractType,\n  isEqualType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLInputObjectType\n} from 'graphql'\n\nimport  { isTypeProperSuperTypeOf } from '../utilities/graphql'\n\nimport { camelCase, pascalCase } from 'change-case';\nimport Inflector from 'inflected';\n\nimport {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport {\n  classDeclaration,\n  structDeclaration,\n  propertyDeclaration,\n  propertyDeclarations,\n  escapeIdentifierIfNeeded\n} from './language';\n\nimport { escapedString, multilineString, literalFromValue } from './values';\n\nimport {\n  typeNameFromGraphQLType,\n} from './types';\n\nimport CodeGenerator from '../utilities/CodeGenerator';\n\nexport function generateSource(context) {\n  const generator = new CodeGenerator(context);\n\n  generator.printOnNewline('//  This file was automatically generated and should not be edited.');\n  generator.printNewline();\n  generator.printOnNewline('import Apollo');\n\n  context.typesUsed.forEach(type => {\n    typeDeclarationForGraphQLType(generator, type);\n  });\n\n  Object.values(context.operations).forEach(operation => {\n    classDeclarationForOperation(generator, operation);\n  });\n\n  Object.values(context.fragments).forEach(fragment => {\n    structDeclarationForFragment(generator, fragment);\n  });\n\n  return generator.output;\n}\n\nexport function classDeclarationForOperation(\n  generator,\n  {\n    operationName,\n    operationType,\n    variables,\n    fields,\n    fragmentsReferenced,\n    source,\n  }\n) {\n\n  let className;\n  let protocol;\n\n  switch (operationType) {\n    case 'query':\n      className = `${pascalCase(operationName)}Query`;\n      protocol = 'GraphQLQuery';\n      break;\n    case 'mutation':\n      className = `${pascalCase(operationName)}Mutation`;\n      protocol = 'GraphQLMutation';\n      break;\n    default:\n      throw new GraphQLError(`Unsupported operation type \"${operationType}\"`);\n  }\n\n  classDeclaration(generator, {\n    className,\n    modifiers: ['public', 'final'],\n    adoptedProtocols: [protocol]\n  }, () => {\n    if (source) {\n      generator.printOnNewline('public static let operationDefinition =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n\n    if (fragmentsReferenced && fragmentsReferenced.length > 0) {\n      generator.printOnNewline('public static let queryDocument = operationDefinition');\n      fragmentsReferenced.forEach(fragment => {\n        generator.print(`.appending(${typeNameForFragmentName(fragment)}.fragmentDefinition)`)\n      });\n    }\n\n    if (variables && variables.length > 0) {\n      const properties = variables.map(({ name, type }) => {\n        const propertyName = escapeIdentifierIfNeeded(camelCase(name));\n        const typeName = typeNameFromGraphQLType(generator.context, type);\n        const isOptional = !(type instanceof GraphQLNonNull || type.ofType instanceof GraphQLNonNull);\n        return { name, propertyName, type, typeName, isOptional };\n      });\n      generator.printNewlineIfNeeded();\n      propertyDeclarations(generator, properties);\n      generator.printNewlineIfNeeded();\n      initializerDeclarationForProperties(generator, properties);\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline(`public var variables: GraphQLMap?`);\n      generator.withinBlock(() => {\n        generator.printOnNewline(wrap(\n          `return [`,\n          join(properties.map(({ name, propertyName }) => `\"${name}\": ${propertyName}`), ', ') || ':',\n          `]`,\n        ));\n      });\n    } else {\n      initializerDeclarationForProperties(generator, []);\n    }\n\n    structDeclarationForSelectionSet(\n      generator,\n      {\n        structName: \"Data\",\n        fields\n      }\n    );\n  });\n}\n\nexport function initializerDeclarationForProperties(generator, properties) {\n  generator.printOnNewline(`public init`);\n  generator.print('(');\n  generator.print(join(properties.map(({ propertyName, type, typeName, isOptional }) =>\n    join([\n      `${propertyName}: ${typeName}`,\n      isOptional && ' = nil'\n    ])\n  ), ', '));\n  generator.print(')');\n\n  generator.withinBlock(() => {\n    properties.forEach(({ propertyName }) => {\n      generator.printOnNewline(`self.${propertyName} = ${propertyName}`);\n    });\n  });\n}\n\nexport function structDeclarationForFragment(\n  generator,\n  {\n    fragmentName,\n    typeCondition,\n    possibleTypes,\n    fields,\n    inlineFragments,\n    fragmentSpreads,\n    source\n  }\n) {\n  const structName = pascalCase(fragmentName);\n\n  structDeclarationForSelectionSet(generator, {\n    structName,\n    adoptedProtocols: ['GraphQLNamedFragment'],\n    parentType: typeCondition,\n    possibleTypes,\n    fields,\n    fragmentSpreads,\n    inlineFragments\n  }, () => {\n    if (source) {\n      generator.printOnNewline('public static let fragmentDefinition =');\n      generator.withIndent(() => {\n        multilineString(generator, source);\n      });\n    }\n  });\n}\n\nexport function structDeclarationForSelectionSet(\n  generator,\n  {\n    structName,\n    adoptedProtocols = ['GraphQLMappable'],\n    parentType,\n    possibleTypes,\n    fields,\n    fragmentSpreads,\n    inlineFragments\n  },\n  beforeClosure\n) {\n  structDeclaration(generator, { structName, adoptedProtocols }, () => {\n    if (beforeClosure) {\n      beforeClosure();\n    }\n\n    if (possibleTypes) {\n      generator.printNewlineIfNeeded();\n      generator.printOnNewline('public static let possibleTypes = [');\n      generator.print(join(possibleTypes.map(type => `\"${String(type)}\"`), ', '));\n      generator.print(']');\n    }\n\n    const properties = fields && propertiesFromFields(generator.context, fields);\n\n    const fragmentProperties = fragmentSpreads && fragmentSpreads.map(fragmentName => {\n      const fragment = generator.context.fragments[fragmentName];\n      if (!fragment) {\n        throw new GraphQLError(`Cannot find fragment \"${fragmentName}\"`);\n      }\n      const propertyName = camelCase(fragmentName);\n      const typeName = typeNameForFragmentName(fragmentName);\n      const isProperSuperType = isTypeProperSuperTypeOf(generator.context.schema, fragment.typeCondition, parentType);\n      return { propertyName, typeName, bareTypeName: typeName, isProperSuperType };\n    });\n\n    const inlineFragmentProperties = inlineFragments && inlineFragments.map(inlineFragment => {\n      const bareTypeName = 'As' + pascalCase(String(inlineFragment.typeCondition));\n      const propertyName = camelCase(bareTypeName);\n      const typeName = bareTypeName + '?'\n      return { ...inlineFragment, propertyName, typeName, bareTypeName };\n    });\n\n    generator.printNewlineIfNeeded();\n\n    if (parentType) {\n      generator.printOnNewline('public let __typename: String');\n    }\n\n    propertyDeclarations(generator, properties);\n\n    if (fragmentProperties && fragmentProperties.length > 0) {\n      generator.printNewlineIfNeeded();\n      propertyDeclaration(generator, { propertyName: 'fragments', typeName: 'Fragments' })\n    }\n\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n      generator.printNewlineIfNeeded();\n      propertyDeclarations(generator, inlineFragmentProperties);\n    }\n\n    generator.printNewlineIfNeeded();\n    generator.printOnNewline('public init(reader: GraphQLResultReader) throws');\n    generator.withinBlock(() => {\n      if (parentType) {\n        generator.printOnNewline(`__typename = try reader.value(for: Field(responseName: \"__typename\"))`);\n      }\n\n      if (properties) {\n        properties.forEach(property => initializationForProperty(generator, property));\n      }\n\n      if (fragmentProperties && fragmentProperties.length > 0) {\n        generator.printNewlineIfNeeded();\n        fragmentProperties.forEach(({ propertyName, typeName, bareTypeName, isProperSuperType }) => {\n          generator.printOnNewline(`let ${propertyName} = try ${typeName}(reader: reader`);\n          if (isProperSuperType) {\n            generator.print(')');\n          } else {\n            generator.print(`, ifTypeMatches: __typename)`);\n          }\n        });\n        generator.printOnNewline(`fragments = Fragments(`);\n        generator.print(join(fragmentSpreads.map(fragmentName => {\n          const propertyName = camelCase(fragmentName);\n          return `${propertyName}: ${propertyName}`;\n        }), ', '));\n        generator.print(')');\n      }\n\n      if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n        generator.printNewlineIfNeeded();\n        inlineFragmentProperties.forEach(({ propertyName, typeName, bareTypeName }) => {\n          generator.printOnNewline(`${propertyName} = try ${bareTypeName}(reader: reader, ifTypeMatches: __typename)`);\n        });\n      }\n    });\n\n    if (fragmentProperties && fragmentProperties.length > 0) {\n      structDeclaration(\n        generator,\n        {\n          structName: 'Fragments'\n        },\n        () => {\n          fragmentProperties.forEach(({ propertyName, typeName, isProperSuperType }) => {\n            if (!isProperSuperType) {\n              typeName += '?';\n            }\n            propertyDeclaration(generator, { propertyName, typeName });\n          })\n        }\n      );\n    }\n\n    if (inlineFragmentProperties && inlineFragmentProperties.length > 0) {\n      inlineFragmentProperties.forEach(property => {\n        structDeclarationForSelectionSet(\n          generator,\n          {\n            structName: property.bareTypeName,\n            parentType: property.typeCondition,\n            possibleTypes: property.possibleTypes,\n            adoptedProtocols: ['GraphQLConditionalFragment'],\n            fields: property.fields,\n            fragmentSpreads: property.fragmentSpreads\n          }\n        );\n      });\n    }\n\n    if (properties) {\n      properties.filter(property => property.isComposite).forEach(property => {\n        structDeclarationForSelectionSet(\n          generator,\n          {\n            structName: structNameForProperty(property),\n            parentType: getNamedType(property.type),\n            fields: property.fields,\n            fragmentSpreads: property.fragmentSpreads,\n            inlineFragments: property.inlineFragments\n          }\n        );\n      });\n    }\n  });\n}\n\nexport function initializationForProperty(generator, { propertyName, responseName, fieldName, args: fieldArgs, type, isOptional }) {\n  const isList = type instanceof GraphQLList || type.ofType instanceof GraphQLList;\n\n  const methodName = isOptional ? (isList ? 'optionalList' : 'optionalValue') : (isList ? 'list' : 'value');\n\n  const fieldInitArgs = join([\n    `responseName: \"${responseName}\"`,\n    responseName != fieldName ? `fieldName: \"${fieldName}\"` : null,\n    fieldArgs && fieldArgs.length && `arguments: ${dictionaryLiteralForFieldArguments(fieldArgs)}`\n  ], ', ');\n  const args = [`for: Field(${fieldInitArgs})`];\n\n  generator.printOnNewline(`${propertyName} = try reader.${methodName}(${ join(args, ', ') })`);\n}\n\nexport function dictionaryLiteralForFieldArguments(args) {\n  function expressionFromValue(value) {\n    if (value.kind === 'Variable') {\n      return `reader.variables[\"${value.variableName}\"]`;\n    } else if (Array.isArray(value)) {\n      return wrap('[', join(value.map(expressionFromValue), ', '), ']');\n    } else if (typeof value === 'object') {\n      return wrap('[', join(Object.entries(value).map(([key, value]) => {\n        return `\"${key}\": ${expressionFromValue(value)}`;\n      }), ', ') || ':', ']');\n    } else {\n      return JSON.stringify(value);\n    }\n  }\n\n  return wrap('[', join(args.map(arg => {\n    return `\"${arg.name}\": ${expressionFromValue(arg.value)}`;\n  }), ', ') || ':', ']');\n}\n\nexport function propertiesFromFields(context, fields) {\n  return fields.map(field => propertyFromField(context, field));\n}\n\nexport function propertyFromField(context, field) {\n  const name = field.name || field.responseName;\n  const propertyName = escapeIdentifierIfNeeded(camelCase(name));\n\n  const type = field.type;\n  const isOptional = field.isConditional || !(type instanceof GraphQLNonNull);\n  const bareType = getNamedType(type);\n\n  if (isCompositeType(bareType)) {\n    const bareTypeName = escapeIdentifierIfNeeded(pascalCase(Inflector.singularize(name)));\n    const typeName = typeNameFromGraphQLType(context, type, bareTypeName, isOptional);\n    return { ...field, propertyName, typeName, bareTypeName, isOptional, isComposite: true };\n  } else {\n    const typeName = typeNameFromGraphQLType(context, type, undefined, isOptional);\n    return { ...field, propertyName, typeName, isOptional, isComposite: false };\n  }\n}\n\nexport function structNameForProperty(property) {\n  return pascalCase(Inflector.singularize(property.responseName));\n}\n\nexport function typeNameForFragmentName(fragmentName) {\n  return pascalCase(fragmentName);\n}\n\nexport function typeDeclarationForGraphQLType(generator, type) {\n  if (type instanceof GraphQLEnumType) {\n    enumerationDeclaration(generator, type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    structDeclarationForInputObjectType(generator, type);\n  }\n}\n\nfunction enumerationDeclaration(generator, type) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  generator.printNewlineIfNeeded();\n  generator.printOnNewline(description && `/// ${description}`);\n  generator.printOnNewline(`public enum ${name}: String`);\n  generator.withinBlock(() => {\n    values.forEach(value =>\n      generator.printOnNewline(`case ${escapeIdentifierIfNeeded(camelCase(value.name))} = \"${value.value}\"${wrap(' /// ', value.description)}`)\n    );\n  });\n  generator.printNewline();\n  generator.printOnNewline(`extension ${name}: JSONDecodable, JSONEncodable {}`);\n}\n\nfunction structDeclarationForInputObjectType(generator, type) {\n  const { name: structName, description } = type;\n  const adoptedProtocols = ['GraphQLMapConvertible'];\n  const properties = propertiesFromFields(generator.context, Object.values(type.getFields()));\n\n  structDeclaration(generator, { structName, description, adoptedProtocols }, () => {\n    generator.printOnNewline(`public var graphQLMap: GraphQLMap`);\n\n    generator.printNewlineIfNeeded();\n    generator.printOnNewline(`public init`);\n    generator.print('(');\n    generator.print(join(properties.map(({ propertyName, type, typeName, isOptional }) =>\n      join([\n        `${propertyName}: ${typeName}`,\n        isOptional && ' = nil'\n      ])\n    ), ', '));\n    generator.print(')');\n\n    generator.withinBlock(() => {\n      generator.printOnNewline(wrap(\n        `graphQLMap = [`,\n        join(properties.map(({ name, propertyName }) => `\"${name}\": ${propertyName}`), ', ') || ':',\n        `]`\n      ));\n    });\n  });\n}\n"]}