{"version":3,"sources":["../../src/schema/resolvers.ts"],"names":["findMany","typeName","findManyResolver","_source","args","context","info","stats","totalRunQuery","totalPluralRunQuery","nodeModel","runQuery","query","firstOnly","type","schema","getType","tracer","path","connectionType","findOne","findOneResolver","filter","findManyPaginated","findManyPaginatedResolver","source","group","getProjectedField","distinct","max","extendedArgs","result","paginate","skip","limit","distinctResolver","field","edges","values","Set","forEach","node","value","undefined","Array","isArray","subValue","add","Date","toISOString","from","sort","min","minResolver","Number","MAX_SAFE_INTEGER","isNaN","maxResolver","MIN_SAFE_INTEGER","sum","sumResolver","reduce","prev","groupResolver","groupedResults","acc","key","concat","Object","create","keys","fieldValue","push","results","count","length","items","slice","pageCount","Math","ceil","currentPage","hasPreviousPage","hasNextPage","NaN","totalCount","map","item","i","arr","next","previous","nodes","pageInfo","itemCount","perPage","link","options","by","fieldConfig","linkResolver","resolver","resolve","defaultFieldResolver","fieldValueOrPromise","fromNode","then","linkResolverValue","returnType","getNodesByIds","ids","getNodeById","id","runQueryArgs","split","reduceRight","obj","in","eq","GraphQLList","resultOrPromise","linkResolverQueryResult","queryResult","find","fileByPath","fileByPathResolver","parentFileNode","findRootNodeAncestor","internal","queryNodesByPath","relPaths","queryNodeByPath","relPath","absolutePath","systemPath","dir","fieldName","selectionSet","fieldNodes","getFieldNodeByNameInSelectionSet","getFields","fieldArg","arg","name","fieldEnum","fieldNode","arguments","kind","Kind","ENUM","enumKey","enumValue","getValue","selections","selection","FRAGMENT_SPREAD","fragmentDef","fragments","INLINE_FRAGMENT","property","WARNED_ABOUT_RESOLVERS","badResolverInvocationMessage","missingVar","resolverName","wrappingResolver","wrappedTracingResolver","parent","reporter","warn","activity","createResolverActivity","parentType","start","endActivity","end","defaultResolver"],"mappings":"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","sourcesContent":["import systemPath from \"path\"\nimport normalize from \"normalize-path\"\nimport {\n  GraphQLList,\n  GraphQLType,\n  getNullableType,\n  getNamedType,\n  Kind,\n  GraphQLFieldConfig,\n  GraphQLResolveInfo,\n  isObjectType,\n  isInterfaceType,\n  isEnumType,\n  SelectionSetNode,\n  SelectionNode,\n  FieldNode,\n} from \"graphql\"\nimport { Path } from \"graphql/jsutils/Path\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { pathToArray } from \"../query/utils\"\nimport { getValueAt } from \"../utils/get-value-at\"\nimport {\n  GatsbyResolver,\n  IGatsbyConnection,\n  IGatsbyResolverContext,\n} from \"./type-definitions\"\nimport { IGatsbyNode } from \"../redux/types\"\n\ntype ResolvedLink = IGatsbyNode | Array<IGatsbyNode> | null\n\ntype nestedListOfStrings = Array<string | nestedListOfStrings>\ntype nestedListOfNodes = Array<IGatsbyNode | nestedListOfNodes>\n\nexport function findMany<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findManyResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      context.stats.totalPluralRunQuery++\n    }\n\n    return context.nodeModel.runQuery(\n      {\n        query: args,\n        firstOnly: false,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path, connectionType: typeName }\n    )\n  }\n}\n\nexport function findOne<TSource, TArgs>(\n  typeName: string\n): GatsbyResolver<TSource, TArgs> {\n  return function findOneResolver(_source, args, context, info): any {\n    if (context.stats) {\n      context.stats.totalRunQuery++\n    }\n    return context.nodeModel.runQuery(\n      {\n        query: { filter: args },\n        firstOnly: true,\n        type: info.schema.getType(typeName),\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n  }\n}\n\ntype PaginatedArgs<TArgs> = TArgs & { skip?: number; limit?: number }\n\nexport function findManyPaginated<TSource, TArgs, TNodeType>(\n  typeName: string\n): GatsbyResolver<TSource, PaginatedArgs<TArgs>> {\n  return async function findManyPaginatedResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyConnection<TNodeType>> {\n    // Peek into selection set and pass on the `field` arg of `group` and\n    // `distinct` which might need to be resolved.\n    const group = getProjectedField(info, `group`)\n    const distinct = getProjectedField(info, `distinct`)\n    const max = getProjectedField(info, `max`)\n    const extendedArgs = {\n      ...args,\n      group: group || [],\n      distinct: distinct || [],\n      max: max || [],\n    }\n\n    const result = await findMany<TSource, PaginatedArgs<TArgs>>(typeName)(\n      source,\n      extendedArgs,\n      context,\n      info\n    )\n    return paginate(result, { skip: args.skip, limit: args.limit })\n  }\n}\n\ninterface IFieldConnectionArgs {\n  field: string\n}\n\nexport const distinct: GatsbyResolver<\n  IGatsbyConnection<any>,\n  IFieldConnectionArgs\n> = function distinctResolver(source, args): Array<string> {\n  const { field } = args\n  const { edges } = source\n\n  const values = new Set<string>()\n  edges.forEach(({ node }) => {\n    const value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    if (value === null || value === undefined) {\n      return\n    }\n    if (Array.isArray(value)) {\n      value.forEach(subValue =>\n        values.add(subValue instanceof Date ? subValue.toISOString() : subValue)\n      )\n    } else if (value instanceof Date) {\n      values.add(value.toISOString())\n    } else {\n      values.add(value)\n    }\n  })\n  return Array.from(values).sort()\n}\n\nexport const min: GatsbyResolver<\n  IGatsbyConnection<any>,\n  IFieldConnectionArgs\n> = function minResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  let min = Number.MAX_SAFE_INTEGER\n\n  edges.forEach(({ node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value) && value < min) {\n      min = value\n    }\n  })\n  if (min === Number.MAX_SAFE_INTEGER) {\n    return null\n  }\n  return min\n}\n\nexport const max: GatsbyResolver<\n  IGatsbyConnection<any>,\n  IFieldConnectionArgs\n> = function maxResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  let max = Number.MIN_SAFE_INTEGER\n\n  edges.forEach(({ node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value) && value > max) {\n      max = value\n    }\n  })\n  if (max === Number.MIN_SAFE_INTEGER) {\n    return null\n  }\n  return max\n}\n\nexport const sum: GatsbyResolver<\n  IGatsbyConnection<any>,\n  IFieldConnectionArgs\n> = function sumResolver(source, args): number | null {\n  const { field } = args\n  const { edges } = source\n\n  return edges.reduce<number | null>((prev, { node }) => {\n    let value =\n      getValueAt(node, `__gatsby_resolved.${field}`) || getValueAt(node, field)\n\n    if (typeof value !== `number`) {\n      value = Number(value)\n    }\n    if (!isNaN(value)) {\n      return (prev || 0) + value\n    }\n    return prev\n  }, null)\n}\n\ntype IGatsbyGroupReturnValue<NodeType> = Array<\n  IGatsbyConnection<NodeType> & {\n    field: string\n    fieldValue: string | undefined\n  }\n>\n\nexport const group: GatsbyResolver<\n  IGatsbyConnection<any>,\n  PaginatedArgs<IFieldConnectionArgs>\n> = function groupResolver(source, args): IGatsbyGroupReturnValue<any> {\n  const { field } = args\n  const { edges } = source\n  const groupedResults: Record<string, Array<string>> = edges.reduce(\n    (acc, { node }) => {\n      const value =\n        getValueAt(node, `__gatsby_resolved.${field}`) ||\n        getValueAt(node, field)\n      const values = Array.isArray(value) ? value : [value]\n      values\n        .filter(value => value != null)\n        .forEach(value => {\n          const key = value instanceof Date ? value.toISOString() : value\n          acc[key] = (acc[key] || []).concat(node)\n        })\n      return acc\n      // Note: using Object.create on purpose:\n      //   object key may be arbitrary string including reserved words (i.e. `constructor`)\n      //   see: https://github.com/gatsbyjs/gatsby/issues/22508\n    },\n    Object.create(null)\n  )\n\n  return Object.keys(groupedResults)\n    .sort()\n    .reduce((acc: IGatsbyGroupReturnValue<any>, fieldValue: string) => {\n      acc.push({\n        ...paginate(groupedResults[fieldValue], args),\n        field,\n        fieldValue,\n      })\n      return acc\n    }, [])\n}\n\nexport function paginate<NodeType>(\n  results: Array<NodeType> = [],\n  { skip = 0, limit }: { skip?: number; limit?: number }\n): IGatsbyConnection<NodeType> {\n  if (results === null) {\n    results = []\n  }\n\n  const count = results.length\n  const items = results.slice(skip, limit && skip + limit)\n\n  const pageCount = limit\n    ? Math.ceil(skip / limit) + Math.ceil((count - skip) / limit)\n    : skip\n    ? 2\n    : 1\n  const currentPage = limit ? Math.ceil(skip / limit) + 1 : skip ? 2 : 1\n  const hasPreviousPage = currentPage > 1\n  const hasNextPage = skip + (limit || NaN) < count\n\n  return {\n    totalCount: count,\n    edges: items.map((item, i, arr) => {\n      return {\n        node: item,\n        next: arr[i + 1],\n        previous: arr[i - 1],\n      }\n    }),\n    nodes: items,\n    pageInfo: {\n      currentPage,\n      hasPreviousPage,\n      hasNextPage,\n      itemCount: items.length,\n      pageCount,\n      perPage: limit,\n      totalCount: count,\n    },\n  }\n}\n\nexport function link<TSource, TArgs>(\n  options: {\n    by: string\n    type?: GraphQLType\n    from?: string\n    fromNode?: string\n  } = {\n    by: `id`,\n  },\n  fieldConfig: GraphQLFieldConfig<\n    TSource,\n    IGatsbyResolverContext<TSource, TArgs>,\n    TArgs\n  >\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n\n  return function linkResolver(\n    source,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValueOrPromise = resolver(source, args, context, {\n      ...info,\n      from: options.from || info.from,\n      fromNode: options.from ? options.fromNode : info.fromNode,\n    })\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof fieldValueOrPromise?.then === `function`) {\n      return fieldValueOrPromise.then(fieldValue =>\n        linkResolverValue(fieldValue, args, context, info)\n      )\n    }\n\n    return linkResolverValue(fieldValueOrPromise, args, context, info)\n  }\n\n  function linkResolverValue(\n    fieldValue,\n    args,\n    context,\n    info\n  ): ResolvedLink | Promise<ResolvedLink> {\n    if (fieldValue == null) {\n      return null\n    }\n\n    const returnType = getNullableType(options.type || info.returnType)\n    const type = getNamedType(returnType)\n\n    if (options.by === `id`) {\n      if (Array.isArray(fieldValue)) {\n        return context.nodeModel.getNodesByIds(\n          { ids: fieldValue, type: type },\n          { path: context.path }\n        )\n      } else {\n        return context.nodeModel.getNodeById(\n          { id: fieldValue, type: type },\n          { path: context.path }\n        )\n      }\n    }\n\n    // Return early if fieldValue is [] since { in: [] } doesn't make sense\n    if (Array.isArray(fieldValue) && fieldValue.length === 0) {\n      return fieldValue\n    }\n\n    const runQueryArgs = args as TArgs & { filter: Record<string, any> }\n    runQueryArgs.filter = options.by.split(`.`).reduceRight(\n      (acc: Record<string, any>, key: string) => {\n        const obj = {}\n        obj[key] = acc\n        return obj\n      },\n      Array.isArray(fieldValue) ? { in: fieldValue } : { eq: fieldValue }\n    )\n\n    const firstOnly = !(returnType instanceof GraphQLList)\n\n    if (context.stats) {\n      context.stats.totalRunQuery++\n      if (firstOnly) {\n        context.stats.totalPluralRunQuery++\n      }\n    }\n\n    const resultOrPromise = context.nodeModel.runQuery(\n      {\n        query: runQueryArgs,\n        firstOnly,\n        type,\n        stats: context.stats,\n        tracer: context.tracer,\n      },\n      { path: context.path }\n    )\n\n    // Note: for this function, at scale, conditional .then is more efficient than generic await\n    if (typeof resultOrPromise?.then === `function`) {\n      return resultOrPromise.then(result =>\n        linkResolverQueryResult(fieldValue, result, returnType)\n      )\n    }\n\n    return linkResolverQueryResult(fieldValue, resultOrPromise, returnType)\n  }\n\n  function linkResolverQueryResult(\n    fieldValue,\n    queryResult,\n    returnType\n  ): IGatsbyNode | Array<IGatsbyNode> {\n    if (\n      returnType instanceof GraphQLList &&\n      Array.isArray(fieldValue) &&\n      Array.isArray(queryResult)\n    ) {\n      return fieldValue.map(value =>\n        queryResult.find(obj => getValueAt(obj, options.by) === value)\n      )\n    } else {\n      return queryResult\n    }\n  }\n}\n\nexport function fileByPath<TSource, TArgs>(\n  options: {\n    from?: string\n    fromNode?: string\n  } = {},\n  fieldConfig\n): GatsbyResolver<TSource, TArgs> {\n  return async function fileByPathResolver(\n    source,\n    args,\n    context,\n    info\n  ): Promise<IGatsbyNode | nestedListOfNodes | null> {\n    const resolver = fieldConfig.resolve || context.defaultFieldResolver\n    const fieldValue: nestedListOfStrings = await resolver(\n      source,\n      args,\n      context,\n      {\n        ...info,\n        from: options.from || info.from,\n        fromNode: options.from ? options.fromNode : info.fromNode,\n      }\n    )\n\n    if (fieldValue == null) {\n      return null\n    }\n\n    // Find the File node for this node (we assume the node is something\n    // like markdown which would be a child node of a File node).\n    const parentFileNode = context.nodeModel.findRootNodeAncestor(\n      source,\n      node => node.internal && node.internal.type === `File`\n    )\n\n    async function queryNodesByPath(\n      relPaths: nestedListOfStrings\n    ): Promise<nestedListOfNodes> {\n      const arr: nestedListOfNodes = []\n      for (let i = 0; i < relPaths.length; ++i) {\n        arr[i] = await (Array.isArray(relPaths[i])\n          ? queryNodesByPath(relPaths[i] as nestedListOfStrings)\n          : queryNodeByPath(relPaths[i] as string))\n      }\n      return arr\n    }\n\n    function queryNodeByPath(relPath: string): Promise<IGatsbyNode> {\n      return context.nodeModel.runQuery({\n        query: {\n          filter: {\n            absolutePath: {\n              eq: normalize(systemPath.resolve(parentFileNode.dir, relPath)),\n            },\n          },\n        },\n        firstOnly: true,\n        type: `File`,\n      })\n    }\n\n    if (Array.isArray(fieldValue)) {\n      return queryNodesByPath(fieldValue)\n    } else {\n      return queryNodeByPath(fieldValue)\n    }\n  }\n}\n\nfunction getProjectedField(\n  info: GraphQLResolveInfo,\n  fieldName: string\n): Array<string> {\n  const selectionSet = info.fieldNodes[0].selectionSet\n  if (selectionSet) {\n    const fieldNodes = getFieldNodeByNameInSelectionSet(\n      selectionSet,\n      fieldName,\n      info\n    )\n\n    const returnType = getNullableType(info.returnType)\n\n    if (isObjectType(returnType) || isInterfaceType(returnType)) {\n      const field = returnType.getFields()[fieldName]\n      const fieldArg = field?.args?.find(arg => arg.name === `field`)\n      if (fieldArg) {\n        const fieldEnum = getNullableType(fieldArg.type)\n\n        if (isEnumType(fieldEnum)) {\n          return fieldNodes.reduce(\n            (acc: Array<string>, fieldNode: FieldNode) => {\n              const fieldArg = fieldNode.arguments?.find(\n                arg => arg.name.value === `field`\n              )\n              if (fieldArg?.value.kind === Kind.ENUM) {\n                const enumKey = fieldArg.value.value\n                const enumValue = fieldEnum.getValue(enumKey)\n                if (enumValue) {\n                  return [...acc, enumValue.value]\n                }\n              }\n              return acc\n            },\n            []\n          )\n        }\n      }\n    }\n  }\n\n  return []\n}\n\nfunction getFieldNodeByNameInSelectionSet(\n  selectionSet: SelectionSetNode,\n  fieldName: string,\n  info: GraphQLResolveInfo\n): Array<FieldNode> {\n  return selectionSet.selections.reduce(\n    (acc: Array<FieldNode>, selection: SelectionNode) => {\n      if (selection.kind === Kind.FRAGMENT_SPREAD) {\n        const fragmentDef = info.fragments[selection.name.value]\n        if (fragmentDef) {\n          return [\n            ...acc,\n            ...getFieldNodeByNameInSelectionSet(\n              fragmentDef.selectionSet,\n              fieldName,\n              info\n            ),\n          ]\n        }\n      } else if (selection.kind === Kind.INLINE_FRAGMENT) {\n        return [\n          ...acc,\n          ...getFieldNodeByNameInSelectionSet(\n            selection.selectionSet,\n            fieldName,\n            info\n          ),\n        ]\n      } /* FIELD_NODE */ else {\n        if (selection.name.value === fieldName) {\n          return [...acc, selection]\n        }\n      }\n      return acc\n    },\n    []\n  )\n}\n\nexport const defaultFieldResolver: GatsbyResolver<\n  any,\n  any\n> = function defaultFieldResolver(source, args, context, info) {\n  if (\n    (typeof source == `object` && source !== null) ||\n    typeof source === `function`\n  ) {\n    if (info.from) {\n      if (info.fromNode) {\n        const node = context.nodeModel.findRootNodeAncestor(source)\n        if (!node) return null\n        return getValueAt(node, info.from)\n      }\n      return getValueAt(source, info.from)\n    }\n    const property = source[info.fieldName]\n    if (typeof property === `function`) {\n      return source[info.fieldName](args, context, info)\n    }\n    return property\n  }\n\n  return null\n}\n\nlet WARNED_ABOUT_RESOLVERS = false\nfunction badResolverInvocationMessage(missingVar: string, path?: Path): string {\n  const resolverName = path ? `${pathToArray(path)} ` : ``\n  return `GraphQL Resolver ${resolverName}got called without \"${missingVar}\" argument. This might cause unexpected errors.\n\nIt's likely that this has happened in a schemaCustomization with manually invoked resolver. If manually invoking resolvers, it's best to invoke them as follows:\n\n  resolve(parent, args, context, info)\n\n`\n}\n\nexport function wrappingResolver<TSource, TArgs>(\n  resolver: GatsbyResolver<TSource, TArgs>\n): GatsbyResolver<TSource, TArgs> {\n  // Note: we explicitly make an attempt to prevent using the `async` keyword because often\n  //       it does not return a promise and this makes a significant difference at scale.\n  //       GraphQL will gracefully handle the resolver result of a promise or non-promise.\n\n  return function wrappedTracingResolver(\n    parent,\n    args,\n    context,\n    info\n  ): Promise<any> {\n    if (!WARNED_ABOUT_RESOLVERS) {\n      if (!info) {\n        reporter.warn(badResolverInvocationMessage(`info`))\n        WARNED_ABOUT_RESOLVERS = true\n      } else if (!context) {\n        reporter.warn(badResolverInvocationMessage(`context`, info.path))\n        WARNED_ABOUT_RESOLVERS = true\n      }\n    }\n\n    let activity\n    if (context?.tracer) {\n      activity = context.tracer.createResolverActivity(\n        info.path,\n        `${info.parentType.name}.${info.fieldName}`\n      )\n      activity.start()\n    }\n    const result = resolver(parent, args, context, info)\n\n    if (!activity) {\n      return result\n    }\n\n    const endActivity = (): void => {\n      if (activity) {\n        activity.end()\n      }\n    }\n    if (typeof result?.then === `function`) {\n      result.then(endActivity, endActivity)\n    } else {\n      endActivity()\n    }\n    return result\n  }\n}\n\nexport const defaultResolver = wrappingResolver(defaultFieldResolver)\n"],"file":"resolvers.js"}