{"version":3,"sources":["../src/loading.js"],"names":["loadSchema","loadAndMergeQueryDocuments","schemaPath","existsSync","schemaData","require","data","__schema","inputPaths","sources","map","body","readFileSync","inputPath","filter","source"],"mappings":";;;;;QAagBA,U,GAAAA,U;QAYAC,0B,GAAAA,0B;;AAzBhB;;;;AACA;;;;AACA;;;;AAEA;;AAOA;;;;AAEO,SAASD,UAAT,CAAoBE,UAApB,EAAgC;AACrC,MAAI,CAAC,aAAGC,UAAH,CAAcD,UAAd,CAAL,EAAgC;AAC9B,UAAM,sBAAe,oCAAmCA,UAAW,EAA7D,CAAN;AACD;AACD,MAAME,aAAaC,QAAQH,UAAR,CAAnB;;AAEA,MAAI,CAACE,WAAWE,IAAZ,IAAoB,CAACF,WAAWG,QAApC,EAA8C;AAC5C,UAAM,sBAAc,+EAAd,CAAN;AACD;AACD,SAAO,gCAAmBH,WAAWE,IAAZ,GAAoBF,WAAWE,IAA/B,GAAsCF,UAAxD,CAAP;AACD;;AAEM,SAASH,0BAAT,CAAoCO,UAApC,EAAgD;AACrD,MAAMC,UAAUD,WAAWE,GAAX,CAAe,qBAAa;AAC1C,QAAMC,OAAO,aAAGC,YAAH,CAAgBC,SAAhB,EAA2B,MAA3B,CAAb;AACA,QAAI,CAACF,IAAL,EAAW;AACT,aAAO,IAAP;AACD;AACD,WAAO,oBAAWA,IAAX,EAAiBE,SAAjB,CAAP;AACD,GANe,EAMbC,MANa,CAMN;AAAA,WAAUC,MAAV;AAAA,GANM,CAAhB;;AAQA,SAAO,wBAAUN,QAAQC,GAAR,CAAY;AAAA,WAAU,oBAAMK,MAAN,CAAV;AAAA,GAAZ,CAAV,CAAP;AACD","file":"loading.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport mkdirp from 'mkdirp'\n\nimport {\n  buildClientSchema,\n  Source,\n  concatAST,\n  parse\n} from 'graphql';\n\nimport { ToolError, logError } from './errors'\n\nexport function loadSchema(schemaPath) {\n  if (!fs.existsSync(schemaPath)) {\n    throw new ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);\n  }\n  const schemaData = require(schemaPath);\n\n  if (!schemaData.data && !schemaData.__schema) {\n    throw new ToolError('GraphQL schema file should contain a valid GraphQL introspection query result');\n  }\n  return buildClientSchema((schemaData.data) ? schemaData.data : schemaData);\n}\n\nexport function loadAndMergeQueryDocuments(inputPaths) {\n  const sources = inputPaths.map(inputPath => {\n    const body = fs.readFileSync(inputPath, 'utf8')\n    if (!body) {\n      return null;\n    }\n    return new Source(body, inputPath);\n  }).filter(source => source);\n\n  return concatAST(sources.map(source => parse(source)));\n}\n"]}