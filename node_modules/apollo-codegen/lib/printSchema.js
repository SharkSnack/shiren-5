'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _graphql = require('graphql');

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(schemaPath, outputPath) {
    var schemaJSON, schema, schemaIDL;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (_fs2.default.existsSync(schemaPath)) {
              _context.next = 2;
              break;
            }

            throw new _errors.ToolError(`Cannot find GraphQL schema file: ${schemaPath}`);

          case 2:
            schemaJSON = JSON.parse(_fs2.default.readFileSync(schemaPath, 'utf8'));

            if (schemaJSON.data) {
              _context.next = 5;
              break;
            }

            throw new _errors.ToolError(`No introspection query result data found in: ${schemaPath}`);

          case 5:
            schema = (0, _graphql.buildClientSchema)(schemaJSON.data);
            schemaIDL = (0, _graphql.printSchema)(schema);


            if (outputPath) {
              _fs2.default.writeFileSync(outputPath, schemaIDL);
            } else {
              console.log(schemaIDL);
            }

          case 8:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function printSchemaFromIntrospectionResult(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return printSchemaFromIntrospectionResult;
}();
//# sourceMappingURL=printSchema.js.map