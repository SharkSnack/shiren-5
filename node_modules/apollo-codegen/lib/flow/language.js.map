{"version":3,"sources":["../../src/flow/language.js"],"names":["typeDeclaration","propertyDeclaration","propertyDeclarations","generator","closure","interfaceName","printNewlineIfNeeded","printNewline","print","pushScope","typeName","withinBlock","popScope","propertyName","description","isArray","isNullable","inInterface","fragmentSpreads","printOnNewline","length","forEach","n","properties","property"],"mappings":"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","file":"language.js","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport { pascalCase } from 'change-case';\n\nexport function typeDeclaration(generator, { interfaceName }, closure) {\n  generator.printNewlineIfNeeded();\n  generator.printNewline();\n  generator.print(`export type ${ interfaceName } =`);\n  generator.pushScope({ typeName: interfaceName });\n  generator.withinBlock(closure, ' {|', '|}');\n  generator.popScope();\n  generator.print(';');\n}\n\nexport function propertyDeclaration(generator, { propertyName, typeName, description, isArray, isNullable, inInterface, fragmentSpreads }, closure) {\n  generator.printOnNewline(description && `// ${description}`);\n  if (closure) {\n    generator.printOnNewline(`${propertyName}:`);\n    if (isNullable) {\n      generator.print(' ?');\n    }\n    if (isArray) {\n      if (!isNullable) {\n        generator.print(' ');\n      }\n      generator.print('Array<');\n    }\n\n    generator.pushScope({ typeName: propertyName });\n\n    generator.withinBlock(() => {\n      if (fragmentSpreads && fragmentSpreads.length > 0) {\n        fragmentSpreads.forEach(n => generator.printOnNewline(`...${pascalCase(n)}Fragment,`));\n      }\n\n      closure();\n    }, ' {|', '|}');\n\n    generator.popScope();\n\n    if (isArray) {\n      generator.print(' >');\n    }\n\n  } else if (fragmentSpreads && fragmentSpreads.length === 1) {\n    generator.printOnNewline(`${propertyName}: ${isArray ? 'Array<' : ''}${pascalCase(fragmentSpreads[0])}Fragment${isArray ? '>' : ''}`);\n  } else if (fragmentSpreads && fragmentSpreads.length > 1) {\n    generator.printOnNewline(`${propertyName}: ${isArray ? 'Array<' : ''}`);\n\n    generator.withinBlock(() => {\n      fragmentSpreads.forEach(n => generator.printOnNewline(`...${pascalCase(n)}Fragment,`));\n    }, '{|', '|}');\n\n    generator.print(isArray ? '>' : '');\n  } else {\n    generator.printOnNewline(`${propertyName}: ${typeName}`);\n  }\n  generator.print(',');\n}\n\nexport function propertyDeclarations(generator, properties) {\n  if (!properties) return;\n  properties.forEach(property => propertyDeclaration(generator, property));\n}\n"]}