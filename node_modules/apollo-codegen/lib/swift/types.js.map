{"version":3,"sources":["../../src/swift/types.js"],"names":["typeNameFromGraphQLType","builtInScalarMap","name","context","type","bareTypeName","isOptional","ofType","undefined","typeName","passthroughCustomScalars","customScalarsPrefix"],"mappings":";;;;;QA6BgBA,uB,GAAAA,uB;;AA7BhB;;AAOA;;AAEA;;AAYA,IAAMC,mBAAmB;AACvB,GAAC,uBAAcC,IAAf,GAAsB,QADC;AAEvB,GAAC,oBAAWA,IAAZ,GAAmB,KAFI;AAGvB,GAAC,sBAAaA,IAAd,GAAqB,QAHE;AAIvB,GAAC,wBAAeA,IAAhB,GAAuB,MAJA;AAKvB,GAAC,mBAAUA,IAAX,GAAkB;AALK,CAAzB;;AAQO,SAASF,uBAAT,CAAiCG,OAAjC,EAA0CC,IAA1C,EAAgDC,YAAhD,EAA8DC,UAA9D,EAA0E;AAC/E,MAAIF,uCAAJ,EAAoC;AAClC,WAAOJ,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,EAA4DC,cAAc,KAA1E,CAAP;AACD,GAFD,MAEO,IAAIA,eAAeE,SAAnB,EAA8B;AACnCF,iBAAa,IAAb;AACD;;AAED,MAAIG,iBAAJ;AACA,MAAIL,oCAAJ,EAAiC;AAC/BK,eAAW,MAAMT,wBAAwBG,OAAxB,EAAiCC,KAAKG,MAAtC,EAA8CF,YAA9C,CAAN,GAAoE,GAA/E;AACD,GAFD,MAEO,IAAID,0CAAJ,EAAuC;AAC5CK,eAAWR,iBAAiBG,KAAKF,IAAtB,MAAgCC,QAAQO,wBAAR,GAAmCP,QAAQQ,mBAAR,GAA8BP,KAAKF,IAAtE,yBAAhC,CAAX;AACD,GAFM,MAEA;AACLO,eAAWJ,gBAAgBD,KAAKF,IAAhC;AACD;;AAED,SAAOI,aAAaG,WAAW,GAAxB,GAA8BA,QAArC;AACD","file":"types.js","sourcesContent":["import {\n  join,\n  block,\n  wrap,\n  indent\n} from '../utilities/printing';\n\nimport { camelCase } from 'change-case';\n\nimport {\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLScalarType,\n  GraphQLEnumType\n} from 'graphql';\n\nconst builtInScalarMap = {\n  [GraphQLString.name]: 'String',\n  [GraphQLInt.name]: 'Int',\n  [GraphQLFloat.name]: 'Double',\n  [GraphQLBoolean.name]: 'Bool',\n  [GraphQLID.name]: 'GraphQLID',\n}\n\nexport function typeNameFromGraphQLType(context, type, bareTypeName, isOptional) {\n  if (type instanceof GraphQLNonNull) {\n    return typeNameFromGraphQLType(context, type.ofType, bareTypeName, isOptional || false)\n  } else if (isOptional === undefined) {\n    isOptional = true;\n  }\n\n  let typeName;\n  if (type instanceof GraphQLList) {\n    typeName = '[' + typeNameFromGraphQLType(context, type.ofType, bareTypeName) + ']';\n  } else if (type instanceof GraphQLScalarType) {\n    typeName = builtInScalarMap[type.name] || (context.passthroughCustomScalars ? context.customScalarsPrefix + type.name: GraphQLString);\n  } else {\n    typeName = bareTypeName || type.name;\n  }\n\n  return isOptional ? typeName + '?' : typeName;\n}\n"]}