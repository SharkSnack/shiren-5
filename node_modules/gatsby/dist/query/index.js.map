{"version":3,"sources":["../../src/query/index.js"],"names":["_","require","fastq","store","hasFlag","FLAG_ERROR_EXTRACTION","queryRunner","websocketManager","GraphQLRunner","process","env","GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY","console","info","concurrency","Number","calcDirtyQueryIds","state","trackedQueries","trackedComponents","deletedQueries","queries","queriesWithBabelErrors","Set","component","values","errors","queryId","pages","add","dirtyQueryIds","query","has","dirty","push","groupQueryIds","queryIds","grouped","groupBy","p","slice","staticQueryIds","static","pageQueryIds","page","createQueue","createJobFn","activity","graphqlRunner","graphqlTracing","getState","worker","cb","job","undefined","span","then","result","tick","catch","error","processQueries","onQueryDone","Promise","resolve","reject","fastQueue","forEach","err","res","kill","idle","drain","createStaticQueryJob","staticQueryComponents","get","hash","id","componentPath","context","path","onDevelopStaticQueryDone","emitStaticQueryData","processStaticQueries","NODE_ENV","processPageQueries","createPageQueryJob","components","isPage","module","exports","calcInitialDirtyQueryIds"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst fastq = require(`fastq`)\nconst { store } = require(`../redux`)\nconst { hasFlag, FLAG_ERROR_EXTRACTION } = require(`../redux/reducers/queries`)\nconst { queryRunner } = require(`./query-runner`)\nconst { websocketManager } = require(`../utils/websocket-manager`)\nconst { GraphQLRunner } = require(`./graphql-runner`)\n\nif (process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) {\n  console.info(\n    `GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY: Running with concurrency set to \\`${process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY}\\``\n  )\n}\n\nconst concurrency =\n  Number(process.env.GATSBY_EXPERIMENTAL_QUERY_CONCURRENCY) || 4\n\n/**\n * Calculates the set of dirty query IDs (page.paths, or staticQuery.id's).\n *\n * Dirty state is tracked in `queries` reducer, here we simply filter\n * them from all tracked queries.\n */\nfunction calcDirtyQueryIds(state) {\n  const { trackedQueries, trackedComponents, deletedQueries } = state.queries\n\n  const queriesWithBabelErrors = new Set()\n  for (const component of trackedComponents.values()) {\n    if (hasFlag(component.errors, FLAG_ERROR_EXTRACTION)) {\n      for (const queryId of component.pages) {\n        queriesWithBabelErrors.add(queryId)\n      }\n    }\n  }\n  // Note: trackedQueries contains both - page and static query ids\n  const dirtyQueryIds = []\n  for (const [queryId, query] of trackedQueries) {\n    if (deletedQueries.has(queryId)) {\n      continue\n    }\n    if (query.dirty > 0 && !queriesWithBabelErrors.has(queryId)) {\n      dirtyQueryIds.push(queryId)\n    }\n  }\n  return dirtyQueryIds\n}\n\n/**\n * groups queryIds by whether they are static or page queries.\n */\nfunction groupQueryIds(queryIds) {\n  const grouped = _.groupBy(queryIds, p =>\n    p.slice(0, 4) === `sq--` ? `static` : `page`\n  )\n  return {\n    staticQueryIds: grouped.static || [],\n    pageQueryIds: grouped.page || [],\n  }\n}\n\nfunction createQueue({\n  createJobFn,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}) {\n  if (!graphqlRunner) {\n    graphqlRunner = new GraphQLRunner(store, { graphqlTracing })\n  }\n  state = state || store.getState()\n\n  function worker(queryId, cb) {\n    const job = createJobFn(state, queryId)\n    if (!job) {\n      cb(null, undefined)\n      return\n    }\n    queryRunner(graphqlRunner, job, activity?.span)\n      .then(result => {\n        if (activity.tick) {\n          activity.tick()\n        }\n        cb(null, { job, result })\n      })\n      .catch(error => {\n        cb(error)\n      })\n  }\n  // Note: fastq.promise version is much slower\n  return fastq(worker, concurrency)\n}\n\nasync function processQueries({\n  queryIds,\n  createJobFn,\n  onQueryDone,\n  state,\n  activity,\n  graphqlRunner,\n  graphqlTracing,\n}) {\n  return new Promise((resolve, reject) => {\n    const fastQueue = createQueue({\n      createJobFn,\n      state,\n      activity,\n      graphqlRunner,\n      graphqlTracing,\n    })\n\n    queryIds.forEach(queryId => {\n      fastQueue.push(queryId, (err, res) => {\n        if (err) {\n          fastQueue.kill()\n          reject(err)\n          return\n        }\n        if (res && onQueryDone) {\n          onQueryDone(res)\n        }\n      })\n    })\n\n    if (!fastQueue.idle()) {\n      fastQueue.drain = () => resolve()\n    } else {\n      resolve()\n    }\n  })\n}\n\nfunction createStaticQueryJob(state, queryId) {\n  const component = state.staticQueryComponents.get(queryId)\n  if (!component) {\n    return undefined\n  }\n  const { hash, id, query, componentPath } = component\n  return {\n    id: queryId,\n    hash,\n    query,\n    componentPath,\n    context: { path: id },\n  }\n}\n\nfunction onDevelopStaticQueryDone({ job, result }) {\n  websocketManager.emitStaticQueryData({\n    result,\n    id: job.hash,\n  })\n}\n\nasync function processStaticQueries(\n  queryIds,\n  { state, activity, graphqlRunner, graphqlTracing }\n) {\n  return processQueries({\n    queryIds,\n    createJobFn: createStaticQueryJob,\n    onQueryDone:\n      process.env.NODE_ENV === `production`\n        ? undefined\n        : onDevelopStaticQueryDone,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n}\n\nasync function processPageQueries(\n  queryIds,\n  { state, activity, graphqlRunner, graphqlTracing }\n) {\n  return processQueries({\n    queryIds,\n    createJobFn: createPageQueryJob,\n    state,\n    activity,\n    graphqlRunner,\n    graphqlTracing,\n  })\n}\n\nfunction createPageQueryJob(state, queryId) {\n  const page = state.pages.get(queryId)\n\n  // Make sure we filter out pages that don't exist. An example is\n  // /dev-404-page/, whose SitePage node is created via\n  // `internal-data-bridge`, but the actual page object is only\n  // created during `gatsby develop`.\n  if (!page) {\n    return undefined\n  }\n  const component = state.components.get(page.componentPath)\n  const { path, componentPath, context } = page\n  const { query } = component\n  return {\n    id: path,\n    query,\n    isPage: true,\n    componentPath,\n    context: {\n      ...page,\n      ...context,\n    },\n  }\n}\n\nmodule.exports = {\n  calcInitialDirtyQueryIds: calcDirtyQueryIds,\n  calcDirtyQueryIds,\n  processPageQueries,\n  processStaticQueries,\n  groupQueryIds,\n}\n"],"file":"index.js"}