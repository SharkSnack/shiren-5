{"version":3,"sources":["../../../src/bootstrap/load-plugins/load.ts"],"names":["GATSBY_CLOUD_PLUGIN_NAME","TYPESCRIPT_PLUGIN_NAME","createFileContentHash","root","globPattern","hash","crypto","createHash","files","glob","sync","nodir","forEach","filepath","update","fs","readFileSync","digest","createPluginId","name","pluginObject","JSON","stringify","options","resolvePlugin","plugin","rootDir","pluginName","_","isString","resolve","parentDir","resolvedPath","path","packageJSON","parse","id","version","Error","requireSource","require","dirname","isAbsolute","err","process","env","gatsby_log_level","reporter","panicOnBuild","addGatsbyPluginCloudPluginWhenInstalled","plugins","processPlugin","cloudPluginLocation","push","loadPlugins","config","configuredPluginNames","Set","info","pluginOptions","isEmpty","option","subplugins","p","merge","internalPlugins","GATSBY_EXPERIMENTAL_FUNCTIONS","filter","Boolean","relPath","absPath","join","__dirname","processedPlugin","add","pathCheck","has","allExtensions","isTSX","jsxPragma","cwd","program","store","getState","pageCreatorOptions","directory","pageCreatorPlugin","find"],"mappings":"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","sourcesContent":["import _ from \"lodash\"\nimport { slash } from \"gatsby-core-utils\"\nimport fs from \"fs\"\nimport path from \"path\"\nimport crypto from \"crypto\"\nimport glob from \"glob\"\nimport { warnOnIncompatiblePeerDependency } from \"./validate\"\nimport { store } from \"../../redux\"\nimport { sync as existsSync } from \"fs-exists-cached\"\nimport { createNodeId } from \"../../utils/create-node-id\"\nimport { createRequireFromPath } from \"gatsby-core-utils\"\nimport {\n  IPluginInfo,\n  PluginRef,\n  IPluginRefObject,\n  IPluginRefOptions,\n  ISiteConfig,\n} from \"./types\"\nimport { PackageJson } from \"../../..\"\nimport reporter from \"gatsby-cli/lib/reporter\"\nimport { silent as resolveFromSilent } from \"resolve-from\"\n\nconst GATSBY_CLOUD_PLUGIN_NAME = `gatsby-plugin-gatsby-cloud`\nconst TYPESCRIPT_PLUGIN_NAME = `gatsby-plugin-typescript`\n\nfunction createFileContentHash(root: string, globPattern: string): string {\n  const hash = crypto.createHash(`md5`)\n  const files = glob.sync(`${root}/${globPattern}`, { nodir: true })\n\n  files.forEach(filepath => {\n    hash.update(fs.readFileSync(filepath))\n  })\n\n  return hash.digest(`hex`)\n}\n\n/**\n * Make sure key is unique to plugin options. E.g. there could\n * be multiple source-filesystem plugins, with different names\n * (docs, blogs).\n *\n * @param name Name of the plugin\n */\nconst createPluginId = (\n  name: string,\n  pluginObject: IPluginRefObject | null = null\n): string =>\n  createNodeId(\n    name + (pluginObject ? JSON.stringify(pluginObject.options) : ``),\n    `Plugin`\n  )\n\n/**\n * @param plugin\n * This should be a plugin spec object where possible but can also be the\n * name of a plugin.\n *\n * When it is a name, it can be a name of a local plugin, the name of a plugin\n * located in node_modules, or a Gatsby internal plugin. In the last case the\n * plugin will be an absolute path.\n * @param rootDir\n * This is the project location, from which are found the plugins\n */\nexport function resolvePlugin(\n  plugin: PluginRef,\n  rootDir: string | null\n): IPluginInfo {\n  const pluginName = _.isString(plugin) ? plugin : plugin.resolve\n\n  // Respect the directory that the plugin was sourced from initially\n  rootDir = (!_.isString(plugin) && plugin.parentDir) || rootDir\n\n  // Only find plugins when we're not given an absolute path\n  if (!existsSync(pluginName)) {\n    // Find the plugin in the local plugins folder\n    const resolvedPath = slash(path.resolve(`./plugins/${pluginName}`))\n\n    if (existsSync(resolvedPath)) {\n      if (existsSync(`${resolvedPath}/package.json`)) {\n        const packageJSON = JSON.parse(\n          fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n        ) as PackageJson\n        const name = packageJSON.name || pluginName\n        warnOnIncompatiblePeerDependency(name, packageJSON)\n\n        return {\n          resolve: resolvedPath,\n          name,\n          id: createPluginId(name),\n          version:\n            packageJSON.version || createFileContentHash(resolvedPath, `**`),\n        }\n      } else {\n        // Make package.json a requirement for local plugins too\n        throw new Error(`Plugin ${pluginName} requires a package.json file`)\n      }\n    }\n  }\n\n  /**\n   * Here we have an absolute path to an internal plugin, or a name of a module\n   * which should be located in node_modules.\n   */\n  try {\n    const requireSource =\n      rootDir !== null\n        ? createRequireFromPath(`${rootDir}/:internal:`)\n        : require\n\n    // If the path is absolute, resolve the directory of the internal plugin,\n    // otherwise resolve the directory containing the package.json\n    const resolvedPath = slash(\n      path.dirname(\n        requireSource.resolve(\n          path.isAbsolute(pluginName)\n            ? pluginName\n            : `${pluginName}/package.json`\n        )\n      )\n    )\n\n    const packageJSON = JSON.parse(\n      fs.readFileSync(`${resolvedPath}/package.json`, `utf-8`)\n    )\n    warnOnIncompatiblePeerDependency(packageJSON.name, packageJSON)\n\n    return {\n      resolve: resolvedPath,\n      id: createPluginId(packageJSON.name),\n      name: packageJSON.name,\n      version: packageJSON.version,\n    }\n  } catch (err) {\n    if (process.env.gatsby_log_level === `verbose`) {\n      reporter.panicOnBuild(\n        `plugin \"${pluginName} threw the following error:\\n`,\n        err\n      )\n    } else {\n      reporter.panicOnBuild(\n        `There was a problem loading plugin \"${pluginName}\". Perhaps you need to install its package?\\nUse --verbose to see actual error.`\n      )\n    }\n    throw new Error(`unreachable`)\n  }\n}\n\nfunction addGatsbyPluginCloudPluginWhenInstalled(\n  plugins: Array<IPluginInfo>,\n  processPlugin: (plugin: PluginRef) => IPluginInfo,\n  rootDir: string\n): void {\n  const cloudPluginLocation = resolveFromSilent(\n    rootDir,\n    GATSBY_CLOUD_PLUGIN_NAME\n  )\n\n  if (cloudPluginLocation) {\n    plugins.push(\n      processPlugin({\n        resolve: cloudPluginLocation,\n        options: {},\n      })\n    )\n  }\n}\n\nexport function loadPlugins(\n  config: ISiteConfig = {},\n  rootDir: string\n): Array<IPluginInfo> {\n  // Instantiate plugins.\n  const plugins: Array<IPluginInfo> = []\n  const configuredPluginNames = new Set()\n\n  // Create fake little site with a plugin for testing this\n  // w/ snapshots. Move plugin processing to its own module.\n  // Also test adding to redux store.\n  function processPlugin(plugin: PluginRef): IPluginInfo {\n    if (_.isString(plugin)) {\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        pluginOptions: {\n          plugins: [],\n        },\n      }\n    } else {\n      plugin.options = plugin.options || {}\n\n      // Throw an error if there is an \"option\" key.\n      if (\n        _.isEmpty(plugin.options) &&\n        !_.isEmpty((plugin as { option?: unknown }).option)\n      ) {\n        throw new Error(\n          `Plugin \"${plugin.resolve}\" has an \"option\" key in the configuration. Did you mean \"options\"?`\n        )\n      }\n\n      // Plugins can have plugins.\n      const subplugins: Array<IPluginInfo> = []\n      if (plugin.options.plugins) {\n        plugin.options.plugins.forEach(p => {\n          subplugins.push(processPlugin(p))\n        })\n\n        plugin.options.plugins = subplugins\n      }\n\n      // Add some default values for tests as we don't actually\n      // want to try to load anything during tests.\n      if (plugin.resolve === `___TEST___`) {\n        const name = `TEST`\n\n        return {\n          id: createPluginId(name, plugin),\n          name,\n          version: `0.0.0-test`,\n          pluginOptions: {\n            plugins: [],\n          },\n          resolve: `__TEST__`,\n        }\n      }\n\n      const info = resolvePlugin(plugin, rootDir)\n\n      return {\n        ...info,\n        id: createPluginId(info.name, plugin),\n        pluginOptions: _.merge({ plugins: [] }, plugin.options),\n      }\n    }\n  }\n\n  // Add internal plugins\n  const internalPlugins = [\n    `../../internal-plugins/dev-404-page`,\n    `../../internal-plugins/load-babel-config`,\n    `../../internal-plugins/internal-data-bridge`,\n    `../../internal-plugins/prod-404`,\n    `../../internal-plugins/webpack-theme-component-shadowing`,\n    `../../internal-plugins/bundle-optimisations`,\n    process.env.GATSBY_EXPERIMENTAL_FUNCTIONS &&\n      `../../internal-plugins/functions`,\n  ].filter(Boolean) as Array<string>\n  internalPlugins.forEach(relPath => {\n    const absPath = path.join(__dirname, relPath)\n    plugins.push(processPlugin(absPath))\n  })\n\n  // Add plugins from the site config.\n  if (config.plugins) {\n    config.plugins.forEach(plugin => {\n      const processedPlugin = processPlugin(plugin)\n      plugins.push(processedPlugin)\n      configuredPluginNames.add(processedPlugin.name)\n    })\n  }\n\n  // the order of all of these page-creators matters. The \"last plugin wins\",\n  // so the user's site comes last, and each page-creator instance has to\n  // match the plugin definition order before that. This works fine for themes\n  // because themes have already been added in the proper order to the plugins\n  // array\n  plugins.forEach(plugin => {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(`gatsby-plugin-page-creator`),\n        options: {\n          path: slash(path.join(plugin.resolve, `src/pages`)),\n          pathCheck: false,\n        },\n      })\n    )\n  })\n\n  if (!configuredPluginNames.has(GATSBY_CLOUD_PLUGIN_NAME)) {\n    addGatsbyPluginCloudPluginWhenInstalled(plugins, processPlugin, rootDir)\n  }\n\n  // Suppor Typescript by default but allow users to override it\n  if (!configuredPluginNames.has(TYPESCRIPT_PLUGIN_NAME)) {\n    plugins.push(\n      processPlugin({\n        resolve: require.resolve(TYPESCRIPT_PLUGIN_NAME),\n        options: {\n          // TODO(@mxstbr): Do not hard-code these defaults but infer them from the\n          // pluginOptionsSchema of gatsby-plugin-typescript\n          allExtensions: false,\n          isTSX: false,\n          jsxPragma: `React`,\n        },\n      })\n    )\n  }\n\n  // Add the site's default \"plugin\" i.e. gatsby-x files in root of site.\n  plugins.push({\n    resolve: slash(process.cwd()),\n    id: createPluginId(`default-site-plugin`),\n    name: `default-site-plugin`,\n    version: createFileContentHash(process.cwd(), `gatsby-*`),\n    pluginOptions: {\n      plugins: [],\n    },\n  })\n\n  const program = store.getState().program\n\n  // default options for gatsby-plugin-page-creator\n  let pageCreatorOptions: IPluginRefOptions | undefined = {\n    path: slash(path.join(program.directory, `src/pages`)),\n    pathCheck: false,\n  }\n\n  if (config.plugins) {\n    const pageCreatorPlugin = config.plugins.find(\n      (plugin): plugin is IPluginRefObject =>\n        typeof plugin !== `string` &&\n        plugin.resolve === `gatsby-plugin-page-creator` &&\n        slash((plugin.options && plugin.options.path) || ``) ===\n          slash(path.join(program.directory, `src/pages`))\n    )\n    if (pageCreatorPlugin) {\n      // override the options if there are any user specified options\n      pageCreatorOptions = pageCreatorPlugin.options\n    }\n  }\n\n  plugins.push(\n    processPlugin({\n      resolve: require.resolve(`gatsby-plugin-page-creator`),\n      options: pageCreatorOptions,\n    })\n  )\n\n  return plugins\n}\n"],"file":"load.js"}