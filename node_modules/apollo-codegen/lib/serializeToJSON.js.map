{"version":3,"sources":["../src/serializeToJSON.js"],"names":["serializeToJSON","serializeAST","context","operations","fragments","typesUsed","map","serializeType","ast","space","key","value","expandTypes","String","type","serializeEnumType","serializeInputObjectType","serializeScalarType","name","description","values","getValues","kind","fields","getFields"],"mappings":";;;;;;;;;;;;;;kBAOwBA,e;QAQRC,Y,GAAAA,Y;;AAfhB;;;;AAOe,SAASD,eAAT,CAAyBE,OAAzB,EAAkC;AAC/C,SAAOD,aAAa;AAClBE,gBAAY,sBAAcD,QAAQC,UAAtB,CADM;AAElBC,eAAW,sBAAcF,QAAQE,SAAtB,CAFO;AAGlBC,eAAWH,QAAQG,SAAR,CAAkBC,GAAlB,CAAsBC,aAAtB;AAHO,GAAb,EAIJ,IAJI,CAAP;AAKD;;AAEM,SAASN,YAAT,CAAsBO,GAAtB,EAA2BC,KAA3B,EAAkC;AACvC,SAAO,yBAAeD,GAAf,EAAoB,UAASE,GAAT,EAAcC,KAAd,EAAqB;AAC9C,QAAI,qBAAOA,KAAP,CAAJ,EAAmB;AACjB,UAAIC,WAAJ,EAAiB;AACf,eAAOL,cAAcI,KAAd,CAAP;AACD,OAFD,MAEO;AACL,eAAOE,OAAOF,KAAP,CAAP;AACD;AACF,KAND,MAMO;AACL,aAAOA,KAAP;AACD;AACF,GAVM,EAUJF,KAVI,CAAP;AAWD;;AAED,SAASF,aAAT,CAAuBO,IAAvB,EAA6B;AAC3B,MAAIA,wCAAJ,EAAqC;AACnC,WAAOC,kBAAkBD,IAAlB,CAAP;AACD,GAFD,MAEO,IAAIA,+CAAJ,EAA4C;AACjD,WAAOE,yBAAyBF,IAAzB,CAAP;AACD,GAFM,MAEA,IAAIA,0CAAJ,EAAuC;AAC5C,WAAOG,oBAAoBH,IAApB,CAAP;AACD;AACF;;AAED,SAASC,iBAAT,CAA2BD,IAA3B,EAAiC;AAAA,MACvBI,IADuB,GACDJ,IADC,CACvBI,IADuB;AAAA,MACjBC,WADiB,GACDL,IADC,CACjBK,WADiB;;AAE/B,MAAMC,SAASN,KAAKO,SAAL,EAAf;;AAEA,SAAO;AACLC,UAAM,UADD;AAELJ,QAFK;AAGLC,eAHK;AAILC,YAAQA,OAAOd,GAAP,CAAW;AAAA,aACjB,EAAEY,MAAMP,MAAMO,IAAd,EAAoBC,aAAaR,MAAMQ,WAAvC,EADiB;AAAA,KAAX;AAJH,GAAP;AAQD;;AAED,SAASH,wBAAT,CAAkCF,IAAlC,EAAwC;AAAA,MAC9BI,IAD8B,GACRJ,IADQ,CAC9BI,IAD8B;AAAA,MACxBC,WADwB,GACRL,IADQ,CACxBK,WADwB;;AAEtC,MAAMI,SAAS,sBAAcT,KAAKU,SAAL,EAAd,CAAf;;AAEA,SAAO;AACLF,UAAM,iBADD;AAELJ,QAFK;AAGLC,eAHK;AAILI;AAJK,GAAP;AAMD;;AAED,SAASN,mBAAT,CAA6BH,IAA7B,EAAmC;AAAA,MACzBI,IADyB,GACHJ,IADG,CACzBI,IADyB;AAAA,MACnBC,WADmB,GACHL,IADG,CACnBK,WADmB;;;AAGjC,SAAO;AACLG,UAAM,YADD;AAELJ,QAFK;AAGLC;AAHK,GAAP;AAKD","file":"serializeToJSON.js","sourcesContent":["import {\n  isType,\n  GraphQLScalarType,\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n} from 'graphql';\n\nexport default function serializeToJSON(context) {\n  return serializeAST({\n    operations: Object.values(context.operations),\n    fragments: Object.values(context.fragments),\n    typesUsed: context.typesUsed.map(serializeType),\n  }, '\\t');\n}\n\nexport function serializeAST(ast, space) {\n  return JSON.stringify(ast, function(key, value) {\n    if (isType(value)) {\n      if (expandTypes) {\n        return serializeType(value);\n      } else {\n        return String(value);\n      }\n    } else {\n      return value;\n    }\n  }, space);\n}\n\nfunction serializeType(type) {\n  if (type instanceof GraphQLEnumType) {\n    return serializeEnumType(type);\n  } else if (type instanceof GraphQLInputObjectType) {\n    return serializeInputObjectType(type);\n  } else if (type instanceof GraphQLScalarType) {\n    return serializeScalarType(type);\n  }\n}\n\nfunction serializeEnumType(type) {\n  const { name, description } = type;\n  const values = type.getValues();\n\n  return {\n    kind: 'EnumType',\n    name,\n    description,\n    values: values.map(value => (\n      { name: value.name, description: value.description }\n    ))\n  }\n}\n\nfunction serializeInputObjectType(type) {\n  const { name, description } = type;\n  const fields = Object.values(type.getFields());\n\n  return {\n    kind: 'InputObjectType',\n    name,\n    description,\n    fields\n  }\n}\n\nfunction serializeScalarType(type) {\n  const { name, description } = type;\n\n  return {\n    kind: 'ScalarType',\n    name,\n    description\n  }\n}\n"]}