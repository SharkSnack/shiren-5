{"version":3,"sources":["../../src/typescript/language.js"],"names":["interfaceDeclaration","propertyDeclaration","propertyDeclarations","generator","closure","interfaceName","extendTypes","printNewlineIfNeeded","printNewline","print","length","join","pushScope","typeName","withinBlock","popScope","propertyName","description","isArray","isNullable","inInterface","fragmentSpreads","printOnNewline","map","n","properties","forEach","property"],"mappings":";;;;;QAOgBA,oB,GAAAA,oB;QAYAC,mB,GAAAA,mB;QA2BAC,oB,GAAAA,oB;;AA9ChB;;AAKA;;AAEO,SAASF,oBAAT,CAA8BG,SAA9B,QAAyEC,OAAzE,EAAkF;AAAA,MAAvCC,aAAuC,QAAvCA,aAAuC;AAAA,MAAxBC,WAAwB,QAAxBA,WAAwB;;AACvFH,YAAUI,oBAAV;AACAJ,YAAUK,YAAV;AACAL,YAAUM,KAAV,CAAiB,oBAAoBJ,aAAe,EAApD;AACA,MAAIC,eAAeA,YAAYI,MAAZ,GAAqB,CAAxC,EAA2C;AACzCP,cAAUM,KAAV,CAAiB,YAAWH,YAAYK,IAAZ,CAAiB,IAAjB,CAAuB,EAAnD;AACD;AACDR,YAAUS,SAAV,CAAoB,EAAEC,UAAUR,aAAZ,EAApB;AACAF,YAAUW,WAAV,CAAsBV,OAAtB;AACAD,YAAUY,QAAV;AACD;;AAEM,SAASd,mBAAT,CAA6BE,SAA7B,SAAoIC,OAApI,EAA6I;AAAA,MAAnGY,YAAmG,SAAnGA,YAAmG;AAAA,MAArFH,QAAqF,SAArFA,QAAqF;AAAA,MAA3EI,WAA2E,SAA3EA,WAA2E;AAAA,MAA9DC,OAA8D,SAA9DA,OAA8D;AAAA,MAArDC,UAAqD,SAArDA,UAAqD;AAAA,MAAzCC,WAAyC,SAAzCA,WAAyC;AAAA,MAA5BC,eAA4B,SAA5BA,eAA4B;;AAClJlB,YAAUmB,cAAV,CAAyBL,eAAgB,MAAKA,WAAY,EAA1D;AACA,MAAIb,OAAJ,EAAa;AACXD,cAAUmB,cAAV,CAA0B,GAAEN,YAAa,GAAzC;AACA,QAAIE,OAAJ,EAAa;AACXf,gBAAUM,KAAV,CAAgB,SAAhB;AACD;AACD,QAAIY,mBAAmBA,gBAAgBX,MAAhB,GAAyB,CAAhD,EAAmD;AACjDP,gBAAUM,KAAV,CAAiB,IAAGY,gBAAgBE,GAAhB,CAAoB;AAAA,eAAM,GAAE,4BAAWC,CAAX,CAAc,UAAtB;AAAA,OAApB,EAAqDb,IAArD,CAA0D,KAA1D,CAAiE,IAArF;AACD;AACDR,cAAUS,SAAV,CAAoB,EAAEC,UAAUG,YAAZ,EAApB;AACAb,cAAUW,WAAV,CAAsBV,OAAtB;AACAD,cAAUY,QAAV;AACA,QAAIG,OAAJ,EAAa;AACXf,gBAAUM,KAAV,CAAgB,IAAhB;AACD;AACD,QAAIU,UAAJ,EAAgB;AACdhB,gBAAUM,KAAV,CAAgB,SAAhB;AACD;AACF,GAjBD,MAiBO,IAAIY,mBAAmBA,gBAAgBX,MAAhB,GAAyB,CAAhD,EAAmD;AACxDP,cAAUmB,cAAV,CAA0B,GAAEN,YAAa,KAAIE,UAAU,QAAV,GAAqB,EAAG,GAAEG,gBAAgBE,GAAhB,CAAoB;AAAA,aAAM,GAAE,4BAAWC,CAAX,CAAc,UAAtB;AAAA,KAApB,EAAqDb,IAArD,CAA0D,KAA1D,CAAiE,GAAEO,UAAU,GAAV,GAAgB,EAAG,EAA7J;AACD,GAFM,MAEA;AACLf,cAAUmB,cAAV,CAA0B,GAAEN,YAAa,KAAIH,QAAS,EAAtD;AACD;AACDV,YAAUM,KAAV,CAAgBW,cAAc,GAAd,GAAoB,GAApC;AACD;;AAEM,SAASlB,oBAAT,CAA8BC,SAA9B,EAAyCsB,UAAzC,EAAqD;AAC1D,MAAI,CAACA,UAAL,EAAiB;AACjBA,aAAWC,OAAX,CAAmB;AAAA,WAAYzB,oBAAoBE,SAApB,EAA+BwB,QAA/B,CAAZ;AAAA,GAAnB;AACD","file":"language.js","sourcesContent":["import {\n  join,\n  wrap,\n} from '../utilities/printing';\n\nimport { pascalCase } from 'change-case';\n\nexport function interfaceDeclaration(generator, { interfaceName, extendTypes }, closure) {\n  generator.printNewlineIfNeeded();\n  generator.printNewline();\n  generator.print(`export interface ${ interfaceName }`);\n  if (extendTypes && extendTypes.length > 0) {\n    generator.print(` extends ${extendTypes.join(', ')}`);\n  }\n  generator.pushScope({ typeName: interfaceName });\n  generator.withinBlock(closure);\n  generator.popScope();\n}\n\nexport function propertyDeclaration(generator, { propertyName, typeName, description, isArray, isNullable, inInterface, fragmentSpreads }, closure) {\n  generator.printOnNewline(description && `// ${description}`);\n  if (closure) {\n    generator.printOnNewline(`${propertyName}:`);\n    if (isArray) {\n      generator.print(' Array<');\n    }\n    if (fragmentSpreads && fragmentSpreads.length > 0) {\n      generator.print(` ${fragmentSpreads.map(n => `${pascalCase(n)}Fragment`).join(' & ')} &`);\n    }\n    generator.pushScope({ typeName: propertyName });\n    generator.withinBlock(closure);\n    generator.popScope();\n    if (isArray) {\n      generator.print(' >');\n    }\n    if (isNullable) {\n      generator.print(' | null');\n    }\n  } else if (fragmentSpreads && fragmentSpreads.length > 0) {\n    generator.printOnNewline(`${propertyName}: ${isArray ? 'Array<' : ''}${fragmentSpreads.map(n => `${pascalCase(n)}Fragment`).join(' & ')}${isArray ? '>' : ''}`);\n  } else {\n    generator.printOnNewline(`${propertyName}: ${typeName}`);\n  }\n  generator.print(inInterface ? ';' : ',');\n}\n\nexport function propertyDeclarations(generator, properties) {\n  if (!properties) return;\n  properties.forEach(property => propertyDeclaration(generator, property));\n}\n"]}