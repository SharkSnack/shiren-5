{"version":3,"sources":["../../src/utilities/CodeGenerator.js"],"names":["CodeGenerator","context","scopeStack","indentWidth","indentLevel","output","scope","push","pop","maybeString","print","startOfIndentLevel","printNewline","printIndent","indentation","repeat","closure","open","close","withIndent","printOnNewline"],"mappings":";;;;;;;;;;;;;;AAAA;;;;IAKqBA,a;AACnB,yBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;;AAEA,SAAKC,UAAL,GAAkB,EAAlB;;AAEA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,WAAL,GAAmB,CAAnB;;AAEA,SAAKC,MAAL,GAAc,EAAd;AACD;;;;8BAESC,K,EAAO;AACf,WAAKJ,UAAL,CAAgBK,IAAhB,CAAqBD,KAArB;AACD;;;+BAEU;AACT,aAAO,KAAKJ,UAAL,CAAgBM,GAAhB,EAAP;AACD;;;0BAEKC,W,EAAa;AACjB,UAAIA,WAAJ,EAAiB;AACf,aAAKJ,MAAL,IAAeI,WAAf;AACD;AACF;;;mCAEc;AACb,UAAI,KAAKJ,MAAT,EAAiB;AACf,aAAKK,KAAL,CAAW,IAAX;AACA,aAAKC,kBAAL,GAA0B,KAA1B;AACD;AACF;;;2CAEsB;AACrB,UAAI,CAAC,KAAKA,kBAAV,EAA8B;AAC5B,aAAKC,YAAL;AACD;AACF;;;mCAEcH,W,EAAa;AAC1B,UAAIA,WAAJ,EAAiB;AACf,aAAKG,YAAL;AACA,aAAKC,WAAL;AACA,aAAKH,KAAL,CAAWD,WAAX;AACD;AACF;;;kCAEa;AACZ,UAAMK,cAAc,IAAIC,MAAJ,CAAW,KAAKX,WAAL,GAAmB,KAAKD,WAAnC,CAApB;AACA,WAAKE,MAAL,IAAeS,WAAf;AACD;;;+BAEUE,O,EAAS;AAClB,UAAI,CAACA,OAAL,EAAc;;AAEd,WAAKZ,WAAL;AACA,WAAKO,kBAAL,GAA0B,IAA1B;AACAK;AACA,WAAKZ,WAAL;AACD;;;gCAEWY,O,EAAmC;AAAA,UAA1BC,IAA0B,uEAAnB,IAAmB;AAAA,UAAbC,KAAa,uEAAL,GAAK;;AAC7C,WAAKR,KAAL,CAAWO,IAAX;AACA,WAAKE,UAAL,CAAgBH,OAAhB;AACA,WAAKI,cAAL,CAAoBF,KAApB;AACD;;;;;kBAjEkBlB,a","file":"CodeGenerator.js","sourcesContent":["import {\n  join,\n  wrap,\n} from './printing';\n\nexport default class CodeGenerator {\n  constructor(context) {\n    this.context = context;\n    \n    this.scopeStack = [];\n\n    this.indentWidth = 2;\n    this.indentLevel = 0;\n\n    this.output = '';\n  }\n\n  pushScope(scope) {\n    this.scopeStack.push(scope);\n  }\n\n  popScope() {\n    return this.scopeStack.pop();\n  }\n\n  print(maybeString) {\n    if (maybeString) {\n      this.output += maybeString;\n    }\n  }\n\n  printNewline() {\n    if (this.output) {\n      this.print('\\n');\n      this.startOfIndentLevel = false;\n    }\n  }\n\n  printNewlineIfNeeded() {\n    if (!this.startOfIndentLevel) {\n      this.printNewline();\n    }\n  }\n\n  printOnNewline(maybeString) {\n    if (maybeString) {\n      this.printNewline();\n      this.printIndent();\n      this.print(maybeString);\n    }\n  }\n\n  printIndent() {\n    const indentation = ' '.repeat(this.indentLevel * this.indentWidth);\n    this.output += indentation;\n  }\n\n  withIndent(closure) {\n    if (!closure) return;\n\n    this.indentLevel++;\n    this.startOfIndentLevel = true;\n    closure();\n    this.indentLevel--;\n  }\n\n  withinBlock(closure, open = ' {', close = '}') {\n    this.print(open);\n    this.withIndent(closure);\n    this.printOnNewline(close);\n  }\n}\n"]}