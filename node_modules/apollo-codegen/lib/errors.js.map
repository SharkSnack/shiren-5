{"version":3,"sources":["../src/errors.js"],"names":["ToolError","logError","logErrorMessage","message","prototype","Error","constructor","value","name","isRunningFromXcodeScript","process","env","XCODE_VERSION_ACTUAL","error","fileName","source","locations","location","line","console","log","stack","lineNumber"],"mappings":";;;;;;;;;;;;;;QAKgBA,S,GAAAA,S;QAWAC,Q,GAAAA,Q;QAiBAC,e,GAAAA,e;;AAjChB;;;;AAEA;AACA;;AAEO,SAASF,SAAT,CAAmBG,OAAnB,EAA4B;AACjC,OAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDH,UAAUI,SAAV,GAAsB,sBAAcC,MAAMD,SAApB,EAA+B;AACnDE,eAAa,EAAEC,OAAOP,SAAT,EADsC;AAEnDQ,QAAM,EAAED,OAAO,WAAT;AAF6C,CAA/B,CAAtB;;AAKA,IAAME,2BAA2BC,QAAQC,GAAR,CAAYC,oBAA7C;;AAEO,SAASX,QAAT,CAAkBY,KAAlB,EAAyB;AAC9B,MAAIA,iBAAiBb,SAArB,EAAgC;AAC9BE,oBAAgBW,MAAMV,OAAtB;AACD,GAFD,MAEO,IAAIU,sCAAJ,EAAmC;AACxC,QAAMC,WAAWD,MAAME,MAAN,IAAgBF,MAAME,MAAN,CAAaP,IAA9C;AACA,QAAIK,MAAMG,SAAV,EAAqB;AAAA;AAAA;AAAA;;AAAA;AACnB,wDAAuBH,MAAMG,SAA7B,4GAAwC;AAAA,cAA7BC,QAA6B;;AACtCf,0BAAgBW,MAAMV,OAAtB,EAA+BW,QAA/B,EAAyCG,SAASC,IAAlD;AACD;AAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIpB,KAJD,MAIO;AACLhB,sBAAgBW,MAAMV,OAAtB,EAA+BW,QAA/B;AACD;AACF,GATM,MASA;AACLK,YAAQC,GAAR,CAAYP,MAAMQ,KAAlB;AACD;AACF;;AAEM,SAASnB,eAAT,CAAyBC,OAAzB,EAAkCW,QAAlC,EAA4CQ,UAA5C,EAAwD;AAC7D,MAAIb,wBAAJ,EAA8B;AAC5B,QAAIK,YAAYQ,UAAhB,EAA4B;AAC1B;AACA;AACAH,cAAQC,GAAR,CAAa,GAAEN,QAAS,IAAGQ,UAAW,YAAWnB,OAAQ,EAAzD;AACD,KAJD,MAIO;AACL;AACAgB,cAAQC,GAAR,CAAa,UAASjB,OAAQ,EAA9B;AACD;AACF,GATD,MASO;AACLgB,YAAQC,GAAR,CAAYjB,OAAZ;AACD;AACF","file":"errors.js","sourcesContent":["import { GraphQLError } from 'graphql';\n\n// ToolError is used for errors that are part of the expected flow\n// and for which a stack trace should not be printed\n\nexport function ToolError(message) {\n  this.message = message;\n}\n\nToolError.prototype = Object.create(Error.prototype, {\n  constructor: { value: ToolError },\n  name: { value: 'ToolError' }\n});\n\nconst isRunningFromXcodeScript = process.env.XCODE_VERSION_ACTUAL;\n\nexport function logError(error) {\n  if (error instanceof ToolError) {\n    logErrorMessage(error.message);\n  } else if (error instanceof GraphQLError) {\n    const fileName = error.source && error.source.name;\n    if (error.locations) {\n      for (const location of error.locations) {\n        logErrorMessage(error.message, fileName, location.line);\n      }\n    } else {\n      logErrorMessage(error.message, fileName);\n    }\n  } else {\n    console.log(error.stack);\n  }\n}\n\nexport function logErrorMessage(message, fileName, lineNumber) {\n  if (isRunningFromXcodeScript) {\n    if (fileName && lineNumber) {\n      // Prefixing error output with file name, line and 'error: ',\n      // so Xcode will associate it with the right file and display the error inline\n      console.log(`${fileName}:${lineNumber}: error: ${message}`);\n    } else {\n      // Prefixing error output with 'error: ', so Xcode will display it as an error\n      console.log(`error: ${message}`);\n    }\n  } else {\n    console.log(message);\n  }\n}\n"]}