{"version":3,"sources":["../src/index.js"],"names":["React","KEYCODE_ENTER","KEYCODE_TAB","KEYCODE_BACKSPACE","KEYCODE_Y","KEYCODE_Z","KEYCODE_M","KEYCODE_PARENS","KEYCODE_BRACKETS","KEYCODE_QUOTE","KEYCODE_BACK_QUOTE","KEYCODE_ESCAPE","HISTORY_LIMIT","HISTORY_TIME_GAP","isWindows","global","test","navigator","platform","isMacLike","className","cssText","Editor","state","capture","_recordCurrentState","input","_input","value","selectionStart","selectionEnd","_recordChange","_getLines","text","position","substring","split","record","overwrite","_history","stack","offset","length","slice","count","extras","Math","max","timestamp","Date","now","last","re","previous","pop","match","current","startsWith","push","_updateInput","props","onValueChange","_applyEdits","_undoEdit","_redoEdit","min","_handleKeyDown","e","tabSize","insertSpaces","ignoreTabKey","onKeyDown","defaultPrevented","keyCode","target","blur","tabCharacter","repeat","preventDefault","shiftKey","linesBeforeCaret","startLine","endLine","nextValue","map","line","i","join","startLineText","updatedSelection","hasSelection","textBeforeCaret","endsWith","matches","indent","chars","metaKey","ctrlKey","altKey","setState","_handleChange","style","padding","highlight","textareaId","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onClick","onFocus","onBlur","onKeyUp","rest","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","highlighted","styles","container","c","editor","textarea","dangerouslySetInnerHTML","__html","children","history","session","Component","defaultProps","textAlign","boxSizing","overflow","top","left","height","width","resize","color","MozOsxFontSmoothing","WebkitFontSmoothing","WebkitTextFillColor","pointerEvents","margin","border","background","display","fontFamily","fontSize","fontStyle","fontVariantLigatures","fontWeight","letterSpacing","lineHeight","textIndent","textRendering","textTransform","whiteSpace","wordBreak","overflowWrap"],"mappings":"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","file":"index.js","sourcesContent":["/* @flow */\n/* global global */\n\nimport * as React from 'react';\n\ntype Props = React.ElementConfig<'div'> & {\n  // Props for the component\n  value: string,\n  onValueChange: (value: string) => mixed,\n  highlight: (value: string) => string | React.Node,\n  tabSize: number,\n  insertSpaces: boolean,\n  ignoreTabKey: boolean,\n  padding: number | string,\n  style?: {},\n\n  // Props for the textarea\n  textareaId?: string,\n  autoFocus?: boolean,\n  disabled?: boolean,\n  form?: string,\n  maxLength?: number,\n  minLength?: number,\n  name?: string,\n  placeholder?: string,\n  readOnly?: boolean,\n  required?: boolean,\n  onClick?: (e: MouseEvent) => mixed,\n  onFocus?: (e: FocusEvent) => mixed,\n  onBlur?: (e: FocusEvent) => mixed,\n  onKeyUp?: (e: KeyboardEvent) => mixed,\n  onKeyDown?: (e: KeyboardEvent) => mixed,\n};\n\ntype State = {\n  capture: boolean,\n};\n\ntype Record = {\n  value: string,\n  selectionStart: number,\n  selectionEnd: number,\n};\n\ntype History = {\n  stack: Array<Record & { timestamp: number }>,\n  offset: number,\n};\n\nconst KEYCODE_ENTER = 13;\nconst KEYCODE_TAB = 9;\nconst KEYCODE_BACKSPACE = 8;\nconst KEYCODE_Y = 89;\nconst KEYCODE_Z = 90;\nconst KEYCODE_M = 77;\nconst KEYCODE_PARENS = 57;\nconst KEYCODE_BRACKETS = 219;\nconst KEYCODE_QUOTE = 222;\nconst KEYCODE_BACK_QUOTE = 192;\nconst KEYCODE_ESCAPE = 27;\n\nconst HISTORY_LIMIT = 100;\nconst HISTORY_TIME_GAP = 3000;\n\nconst isWindows = 'navigator' in global && /Win/i.test(navigator.platform);\nconst isMacLike =\n  'navigator' in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\nconst className = 'npm__react-simple-code-editor__textarea';\n\nconst cssText = /* CSS */ `\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.${className}:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .${className} {\n    color: transparent !important;\n  }\n\n  .${className}::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n`;\n\nexport default class Editor extends React.Component<Props, State> {\n  static defaultProps = {\n    tabSize: 2,\n    insertSpaces: true,\n    ignoreTabKey: false,\n    padding: 0,\n  };\n\n  state = {\n    capture: true,\n  };\n\n  componentDidMount() {\n    this._recordCurrentState();\n  }\n\n  _recordCurrentState = () => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Save current state of the input\n    const { value, selectionStart, selectionEnd } = input;\n\n    this._recordChange({\n      value,\n      selectionStart,\n      selectionEnd,\n    });\n  };\n\n  _getLines = (text: string, position: number) =>\n    text.substring(0, position).split('\\n');\n\n  _recordChange = (record: Record, overwrite?: boolean = false) => {\n    const { stack, offset } = this._history;\n\n    if (stack.length && offset > -1) {\n      // When something updates, drop the redo operations\n      this._history.stack = stack.slice(0, offset + 1);\n\n      // Limit the number of operations to 100\n      const count = this._history.stack.length;\n\n      if (count > HISTORY_LIMIT) {\n        const extras = count - HISTORY_LIMIT;\n\n        this._history.stack = stack.slice(extras, count);\n        this._history.offset = Math.max(this._history.offset - extras, 0);\n      }\n    }\n\n    const timestamp = Date.now();\n\n    if (overwrite) {\n      const last = this._history.stack[this._history.offset];\n\n      if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n        // A previous entry exists and was in short interval\n\n        // Match the last word in the line\n        const re = /[^a-z0-9]([a-z0-9]+)$/i;\n\n        // Get the previous line\n        const previous = this._getLines(last.value, last.selectionStart)\n          .pop()\n          .match(re);\n\n        // Get the current line\n        const current = this._getLines(record.value, record.selectionStart)\n          .pop()\n          .match(re);\n\n        if (previous && current && current[1].startsWith(previous[1])) {\n          // The last word of the previous line and current line match\n          // Overwrite previous entry so that undo will remove whole word\n          this._history.stack[this._history.offset] = { ...record, timestamp };\n\n          return;\n        }\n      }\n    }\n\n    // Add the new operation to the stack\n    this._history.stack.push({ ...record, timestamp });\n    this._history.offset++;\n  };\n\n  _updateInput = (record: Record) => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Update values and selection state\n    input.value = record.value;\n    input.selectionStart = record.selectionStart;\n    input.selectionEnd = record.selectionEnd;\n\n    this.props.onValueChange(record.value);\n  };\n\n  _applyEdits = (record: Record) => {\n    // Save last selection state\n    const input = this._input;\n    const last = this._history.stack[this._history.offset];\n\n    if (last && input) {\n      this._history.stack[this._history.offset] = {\n        ...last,\n        selectionStart: input.selectionStart,\n        selectionEnd: input.selectionEnd,\n      };\n    }\n\n    // Save the changes\n    this._recordChange(record);\n    this._updateInput(record);\n  };\n\n  _undoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the previous edit\n    const record = stack[offset - 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.max(offset - 1, 0);\n    }\n  };\n\n  _redoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the next edit\n    const record = stack[offset + 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.min(offset + 1, stack.length - 1);\n    }\n  };\n\n  _handleKeyDown = (e: *) => {\n    const { tabSize, insertSpaces, ignoreTabKey, onKeyDown } = this.props;\n\n    if (onKeyDown) {\n      onKeyDown(e);\n\n      if (e.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (e.keyCode === KEYCODE_ESCAPE) {\n      e.target.blur();\n    }\n\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\n\n    if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.state.capture) {\n      // Prevent focus change\n      e.preventDefault();\n\n      if (e.shiftKey) {\n        // Unindent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const nextValue = value\n          .split('\\n')\n          .map((line, i) => {\n            if (\n              i >= startLine &&\n              i <= endLine &&\n              line.startsWith(tabCharacter)\n            ) {\n              return line.substring(tabCharacter.length);\n            }\n\n            return line;\n          })\n          .join('\\n');\n\n        if (value !== nextValue) {\n          const startLineText = linesBeforeCaret[startLine];\n\n          this._applyEdits({\n            value: nextValue,\n            // Move the start cursor if first line in selection was modified\n            // It was modified only if it started with a tab\n            selectionStart: startLineText.startsWith(tabCharacter)\n              ? selectionStart - tabCharacter.length\n              : selectionStart,\n            // Move the end cursor by total number of characters removed\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\n          });\n        }\n      } else if (selectionStart !== selectionEnd) {\n        // Indent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const startLineText = linesBeforeCaret[startLine];\n\n        this._applyEdits({\n          value: value\n            .split('\\n')\n            .map((line, i) => {\n              if (i >= startLine && i <= endLine) {\n                return tabCharacter + line;\n              }\n\n              return line;\n            })\n            .join('\\n'),\n          // Move the start cursor by number of characters added in first line of selection\n          // Don't move it if it there was no text before cursor\n          selectionStart: /\\S/.test(startLineText)\n            ? selectionStart + tabCharacter.length\n            : selectionStart,\n          // Move the end cursor by total number of characters added\n          selectionEnd:\n            selectionEnd + tabCharacter.length * (endLine - startLine + 1),\n        });\n      } else {\n        const updatedSelection = selectionStart + tabCharacter.length;\n\n        this._applyEdits({\n          // Insert tab character at caret\n          value:\n            value.substring(0, selectionStart) +\n            tabCharacter +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_BACKSPACE) {\n      const hasSelection = selectionStart !== selectionEnd;\n      const textBeforeCaret = value.substring(0, selectionStart);\n\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n        // Prevent default delete behaviour\n        e.preventDefault();\n\n        const updatedSelection = selectionStart - tabCharacter.length;\n\n        this._applyEdits({\n          // Remove tab character at caret\n          value:\n            value.substring(0, selectionStart - tabCharacter.length) +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_ENTER) {\n      // Ignore selections\n      if (selectionStart === selectionEnd) {\n        // Get the current line\n        const line = this._getLines(value, selectionStart).pop();\n        const matches = line.match(/^\\s+/);\n\n        if (matches && matches[0]) {\n          e.preventDefault();\n\n          // Preserve indentation on inserting a new line\n          const indent = '\\n' + matches[0];\n          const updatedSelection = selectionStart + indent.length;\n\n          this._applyEdits({\n            // Insert indentation character at caret\n            value:\n              value.substring(0, selectionStart) +\n              indent +\n              value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      }\n    } else if (\n      e.keyCode === KEYCODE_PARENS ||\n      e.keyCode === KEYCODE_BRACKETS ||\n      e.keyCode === KEYCODE_QUOTE ||\n      e.keyCode === KEYCODE_BACK_QUOTE\n    ) {\n      let chars;\n\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n        chars = ['(', ')'];\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\n        if (e.shiftKey) {\n          chars = ['{', '}'];\n        } else {\n          chars = ['[', ']'];\n        }\n      } else if (e.keyCode === KEYCODE_QUOTE) {\n        if (e.shiftKey) {\n          chars = ['\"', '\"'];\n        } else {\n          chars = [\"'\", \"'\"];\n        }\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n        chars = ['`', '`'];\n      }\n\n      // If text is selected, wrap them in the characters\n      if (selectionStart !== selectionEnd && chars) {\n        e.preventDefault();\n\n        this._applyEdits({\n          value:\n            value.substring(0, selectionStart) +\n            chars[0] +\n            value.substring(selectionStart, selectionEnd) +\n            chars[1] +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart,\n          selectionEnd: selectionEnd + 2,\n        });\n      }\n    } else if (\n      (isMacLike\n        ? // Trigger undo with ⌘+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z\n        : // Trigger undo with Ctrl+Z on other platforms\n          e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n      !e.shiftKey &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._undoEdit();\n    } else if (\n      (isMacLike\n        ? // Trigger redo with ⌘+Shift+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n        : isWindows\n          ? // Trigger redo with Ctrl+Y on Windows\n            e.ctrlKey && e.keyCode === KEYCODE_Y\n          : // Trigger redo with Ctrl+Shift+Z on other platforms\n            e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._redoEdit();\n    } else if (\n      e.keyCode === KEYCODE_M &&\n      e.ctrlKey &&\n      (isMacLike ? e.shiftKey : true)\n    ) {\n      e.preventDefault();\n\n      // Toggle capturing tab key so users can focus away\n      this.setState(state => ({\n        capture: !state.capture,\n      }));\n    }\n  };\n\n  _handleChange = (e: *) => {\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    this._recordChange(\n      {\n        value,\n        selectionStart,\n        selectionEnd,\n      },\n      true\n    );\n\n    this.props.onValueChange(value);\n  };\n\n  _history: History = {\n    stack: [],\n    offset: -1,\n  };\n\n  _input: ?HTMLTextAreaElement;\n\n  get session() {\n    return {\n      history: this._history,\n    };\n  }\n\n  set session(session: { history: History }) {\n    this._history = session.history;\n  }\n\n  render() {\n    const {\n      value,\n      style,\n      padding,\n      highlight,\n      textareaId,\n      autoFocus,\n      disabled,\n      form,\n      maxLength,\n      minLength,\n      name,\n      placeholder,\n      readOnly,\n      required,\n      onClick,\n      onFocus,\n      onBlur,\n      onKeyUp,\n      /* eslint-disable no-unused-vars */\n      onKeyDown,\n      onValueChange,\n      tabSize,\n      insertSpaces,\n      ignoreTabKey,\n      /* eslint-enable no-unused-vars */\n      ...rest\n    } = this.props;\n\n    const contentStyle = {\n      paddingTop: padding,\n      paddingRight: padding,\n      paddingBottom: padding,\n      paddingLeft: padding,\n    };\n\n    const highlighted = highlight(value);\n\n    return (\n      <div {...rest} style={{ ...styles.container, ...style }}>\n        <textarea\n          ref={c => (this._input = c)}\n          style={{\n            ...styles.editor,\n            ...styles.textarea,\n            ...contentStyle,\n          }}\n          className={className}\n          id={textareaId}\n          value={value}\n          onChange={this._handleChange}\n          onKeyDown={this._handleKeyDown}\n          onClick={onClick}\n          onKeyUp={onKeyUp}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          disabled={disabled}\n          form={form}\n          maxLength={maxLength}\n          minLength={minLength}\n          name={name}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          required={required}\n          autoFocus={autoFocus}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          data-gramm={false}\n        />\n        <pre\n          aria-hidden=\"true\"\n          style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\n          {...(typeof highlighted === 'string'\n            ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\n            : { children: highlighted })}\n        />\n        {/* eslint-disable-next-line react/no-danger */}\n        <style type=\"text/css\" dangerouslySetInnerHTML={{ __html: cssText }} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    position: 'relative',\n    textAlign: 'left',\n    boxSizing: 'border-box',\n    padding: 0,\n    overflow: 'hidden',\n  },\n  textarea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    resize: 'none',\n    color: 'inherit',\n    overflow: 'hidden',\n    MozOsxFontSmoothing: 'grayscale',\n    WebkitFontSmoothing: 'antialiased',\n    WebkitTextFillColor: 'transparent',\n  },\n  highlight: {\n    position: 'relative',\n    pointerEvents: 'none',\n  },\n  editor: {\n    margin: 0,\n    border: 0,\n    background: 'none',\n    boxSizing: 'inherit',\n    display: 'inherit',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontStyle: 'inherit',\n    fontVariantLigatures: 'inherit',\n    fontWeight: 'inherit',\n    letterSpacing: 'inherit',\n    lineHeight: 'inherit',\n    tabSize: 'inherit',\n    textIndent: 'inherit',\n    textRendering: 'inherit',\n    textTransform: 'inherit',\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'keep-all',\n    overflowWrap: 'break-word',\n  },\n};\n"]}